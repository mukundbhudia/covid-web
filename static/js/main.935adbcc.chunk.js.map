{"version":3,"sources":["components/Charts/TimeSeries.jsx","components/Nav/DataUpdatedTimeStamp.jsx","components/Panels/PanelDeathsToday.jsx","components/Panels/PanelConfirmedToday.jsx","components/Panels/PanelConfirmedCount.jsx","components/Panels/PanelActiveCount.jsx","components/Panels/PanelRecoveredCount.jsx","components/Panels/PanelDeathCount.jsx","components/Charts/ProgressBar.jsx","components/Panels/PanelConfirmedVsActive.jsx","components/Panels/PanelRecoveriesVsDeaths.jsx","components/WorldHeatMap/WorldHeatMap.jsx","components/WorldHeatMap/HeatMapRangeSlider.jsx","components/Charts/TopXBarGraph.jsx","components/Panels/PanelTopX.jsx","components/InnerPages/GlobalInnerPage.jsx","components/InnerPages/CountryNotFound.jsx","components/Charts/ProvincesBarGraph.jsx","components/Nav/ProvincesMenu.jsx","components/InnerPages/CountryInnerPage.jsx","components/InnerPages/TopCasesInnerPage.jsx","components/InnerPages/TodayInnerPage.jsx","components/Nav/Footer.jsx","components/InnerPages/HeatMapsInnerPage.jsx","components/Nav/NavLink.jsx","components/Nav/InputSearch/InputSearch.jsx","components/Nav/NavBar.jsx","components/Nav/NavSideBar.jsx","components/InnerPages/DataTableInnerPage/DataTable.jsx","components/InnerPages/DataTableInnerPage/DataTableInnerPage.jsx","App.jsx","serviceWorker.ts","index.tsx"],"names":["isNumeric","subject","movingAverage","data","size","datum","length","prepare","ret","Array","fill","NaN","sum","i","counter","slice","TimeSeries","chartTitle","casesToHide","currentCases","chartRef","React","createRef","useState","dataType","setDataType","chartType","setChartType","movingAveragePeriod","setMovingAveragePeriod","allDates","confirmed","confirmedToday","deaths","deathsToday","chartColors","firstCaseAdded","forEach","element","cases","dateFromString","Date","day","previousCase","push","toLocaleDateString","x","y","confirmedCasesToday","today","confirmedTodayArray","map","deathsTodayArray","movingAverageConfirmedToday","movingAverageDeathsToday","movingAverageConfirmedTodayChartData","movingAverageDeathsTodayChartData","chartConfig","type","labels","datasets","label","backgroundColor","borderColor","order","hidden","options","responsive","maintainAspectRatio","animation","duration","title","display","text","tooltips","mode","intersect","callbacks","tooltipItem","datasetIndex","yLabel","toLocaleString","elements","point","radius","hover","scales","xAxes","scaleLabel","labelString","yAxes","ticks","beginAtZero","callback","value","useEffect","myChartRef","current","getContext","chart","Chart","destroy","className","ref","role","aria-label","data-tip","min","max","id","onChange","changeEvent","target","data-toggle","name","onClick","UpdatedTimeStamp","lastUpdated","lastUpdatedDate","timeago","parseInt","PanelDeathsToday","caseCount","PanelConfirmedToday","PanelConfirmedCount","PanelActiveCount","PanelRecoveredCount","PanelDeathCount","red","orange","yellow","green","blue","purple","grey","ProgressBar","dataSet","percentageDataSet","item","total","reduce","count","dataItem","percentage","Math","ceil","key","style","width","color","aria-valuenow","aria-valuemin","aria-valuemax","data-placement","PanelConfirmedVsActive","PanelRecoveriesVsDeaths","WorldHeatMap","caseNumberToParse","casesByLocationWithNoProvince","lightColour","darkColour","caseType","showMoreThanOneDataItem","heatMapData","countryCode","mainCaseNumberToShow","isValidCase","active","recovered","dataset","onlyValues","obj","minValue","apply","maxValue","paletteScale","d3","scale","linear","domain","range","iso","fillColor","mapDataLabel","Datamap","document","getElementById","projection","fills","defaultFill","geographyConfig","highlightBorderWidth","highlightFillColor","geo","highlightBorderColor","popupTemplate","tooltipHtml","properties","prevProps","this","props","date","mapData","processMapData","updateChoropleth","generateNewMap","Component","gql","datesVisited","HeatMapRangeSlider","dates","timeSeriesLength","sliderValue","setSliderValue","globalCasesByDate","setGlobalCasesByDate","currentDay","currentDayAsDate","moveSlider","newSliderValue","fetch","then","res","json","result","console","log","error","content","TopXBarGraph","chartLabel","chartLabelKey","labelColor","dataArray","country","countries","chartLabelColor","plugins","isGreaterThanZero","array","filter","PanelTopX","includeToday","topXconfirmedByCountry","topXactiveByCountry","topXrecoveredByCountry","topXdeathsByCountry","topXconfirmedTodayByCountry","topXdeathsTodayByCountry","COVID_GLOBAL_PAGE","InnerPage","useQuery","loading","JSON","stringify","totalCases","globalTimeSeries","getAllDaysWithCases","topXdata","confirmedVsActiveProgressBar","recoveredVsDeathsProgressBar","DataUpdatedTimeStamp","confirmedTodayMovingAverage","deathsTodayMovingAverage","useParams","ProvincesBarGraph","countryName","confirmedDataArray","confirmedTodayDataArray","activeDataArray","recoveredDataArray","deathsDataArray","deathsTodayDataArray","provinces","province","ProvincesMenu","idKey","getProvincesGivenCountryName","provinceList","replace","toLowerCase","concat","provinceKey","to","pData","getCountry","getCasesByIdKey","CountryNotFound","lastUpdate","pageTitle","hasProvince","casesByDate","getTopCases","topCaseOptions","topLimitState","TopCasesInnerPage","topLimit","setTopLimit","variables","limit","client","onMouseOver","topCaseLimit","query","caseMaps","textClassName","caseTypeState","TodayInnerPage","setCaseType","Object","keys","caseKey","Footer","href","HeatMapsInnerPage","iconMap","home","report","NavLink","path","icon","match","useRouteMatch","exact","xmlns","height","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","dangerouslySetInnerHTML","__html","InputSearch","state","disabled","dropup","flip","highlightOnlyResult","minLength","open","undefined","history","useHistory","labelKey","option","selected","onBlur","placeholder","NavBar","searchData","collapsed","setCollapsed","classOne","classTwo","process","data-target","aria-controls","aria-expanded","NavSideBar","casesByLocation","sort","a","b","countryA","toUpperCase","countryB","comparison","allCases","linkToRender","d","points","x1","y1","x2","y2","DataTable","sortConfig","tableData","requestSort","sortKey","params","searchParams","URLSearchParams","set","toString","setParams","showLabel","headerSortKey","indicator","applySelectedColumnStyle","applySelectedColumnHeaderStyle","sortedTableData","sortableItems","sortedItems","scope","tableRow","sortParams","DataTableInnerPage","location","useLocation","search","sortQueryParam","get","orderQueryParam","COVID_TOTALS","App","basename","GlobalInnerPage","children","CountryInnerPage","Boolean","window","hostname","ApolloClient","uri","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.935adbcc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Chart from 'chart.js'\n\nconst isNumeric = subject => typeof subject === 'number'\n\n/**\n * Moving average\n * --------------\n * Courtesy of `kaelzhang`_, under MIT License.\n *\n * .. _kaelzhang: https://github.com/kaelzhang/moving-averages\n *\n * With alterations and optimisation by Pouria Hadjibagheri.\n *\n * @param data { Array<number> } Array of numbers\n * @param size { number } Size of the moving window\n * @returns { Array<number> } Array of moving averages\n */\nconst movingAverage = ( data, size ) => {\n  const\n      length = data.length,\n      prepare = size - 1,\n      ret = Array(length).fill(NaN);\n\n  let\n      sum = 0,\n      i = 0,\n      counter = 0,\n      datum;\n\n  for ( ; i < length && counter < prepare; i++ ) {\n      datum = data[i]\n\n      if ( isNumeric(datum) ) {\n          sum += datum;\n          counter++\n      }\n  }\n\n  for ( ; i < length; i++ ) {\n      datum = data[i]\n\n      if ( isNumeric(datum) )\n          sum += datum;\n\n      if ( isNumeric(data[i - size]) )\n          sum -= data[i - size];\n\n      ret[i] = sum / size\n  }\n  return ret.slice(size - 1)\n}\n\nconst TimeSeries = ({ chartTitle, casesToHide, data, currentCases }) => {\n  const chartRef = React.createRef()\n  const [ dataType, setDataType] = useState('linear')\n  const [ chartType, setChartType] = useState('line')\n  const [ movingAveragePeriod, setMovingAveragePeriod] = useState(7)\n\n  const allDates = []\n  let confirmed = []\n  let confirmedToday = []\n  let deaths = []\n  let deathsToday = []\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    darkPurple: 'rgb(102, 68, 170)',\n    grey: 'rgb(201, 203, 207)',\n    darkGrey: 'rgb(160, 161, 164)',\n  }\n\n  let firstCaseAdded = false\n  data.forEach((element, i) => {\n    const cases = element\n    if (cases.confirmed > 0) {\n      const dateFromString = new Date(cases.day)\n      if (!firstCaseAdded && i > 0) {\n        const previousCase = data[i-1]        \n        const dateFromString = new Date(previousCase.day)\n        firstCaseAdded = true\n        allDates.push((dateFromString).toLocaleDateString())\n        confirmed.push({x: dateFromString, y: previousCase.confirmed})\n        deaths.push({x: dateFromString, y: previousCase.deaths})\n        confirmedToday.push({x: dateFromString, y: previousCase.confirmedCasesToday})\n        deathsToday.push({x: dateFromString, y: previousCase.deathsToday})\n      } else {\n        allDates.push((dateFromString).toLocaleDateString())\n        confirmed.push({x: dateFromString, y: cases.confirmed})\n        deaths.push({x: dateFromString, y: cases.deaths})\n        confirmedToday.push({x: dateFromString, y: cases.confirmedCasesToday})\n        deathsToday.push({x: dateFromString, y: cases.deathsToday})       \n      }\n    }\n  })\n\n  const today = new Date()\n  allDates.push((today).toLocaleDateString())\n  confirmed.push({x: today, y: currentCases.confirmed})\n  deaths.push({x: today, y: currentCases.deaths})\n  confirmedToday.push({x: today, y: currentCases.confirmedCasesToday})\n  deathsToday.push({x: today, y: currentCases.deathsToday})\n\n  const confirmedTodayArray = data.map((element, i) => {\n    return element.confirmedCasesToday\n  })\n\n  const deathsTodayArray = data.map((element, i) => {\n    return element.deathsToday\n  })\n\n  const movingAverageConfirmedToday = movingAverage(confirmedTodayArray, movingAveragePeriod)\n  const movingAverageDeathsToday = movingAverage(deathsTodayArray, movingAveragePeriod)\n\n  const movingAverageConfirmedTodayChartData = allDates.map((element, i) => {\n    const date = new Date(element)\n    const average = movingAverageConfirmedToday[i]\n    return { x: date, y: average }\n  })\n\n  const movingAverageDeathsTodayChartData = allDates.map((element, i) => {\n    const date = new Date(element)\n    const average = movingAverageDeathsToday[i]\n    return { x: date, y: average }\n  })\n  \n\n  const chartConfig = {\n    type: chartType,\n    data: {\n      labels: allDates,\n      datasets: [\n        {\n          type: chartType,\n          label: 'Cumulative confirmed cases',\n          fill: false,\n          backgroundColor: chartColors.red,\n          borderColor: chartColors.red,\n          order: 0,\n          data: confirmed,\n          hidden: casesToHide['confirmed'],\n        },\n        {\n          type : chartType,\n          label: 'Cumulative deaths',\n          fill: false,\n          backgroundColor: chartColors.grey,\n          borderColor: chartColors.grey,\n          order: 1,\n          data: deaths,\n          hidden: casesToHide['deaths'],\n        },\n        {\n          type : 'bar',\n          label: 'Daily confirmed cases',\n          fill: false,\n          backgroundColor: chartColors.purple,\n          borderColor: chartColors.purple,\n          order: 3,\n          data: confirmedToday,\n          hidden: casesToHide['confirmedToday'],\n        },\n        {\n          type : 'line',\n          label: `Daily confirmed ${movingAveragePeriod} day moving average`,\n          fill: false,\n          backgroundColor: chartColors.darkPurple,\n          borderColor: chartColors.darkPurple,\n          order: 2,\n          data: movingAverageConfirmedTodayChartData.slice(3, -3),\n          hidden: casesToHide['confirmedTodayMovingAverage'],\n        },\n        {\n          type : 'bar',\n          label: 'Daily deaths',\n          fill: false,\n          backgroundColor: chartColors.yellow,\n          borderColor: chartColors.yellow,\n          order: 5,\n          data: deathsToday,\n          hidden: casesToHide['deathsToday'],\n        },\n        {\n          type : 'line',\n          label: `Daily deaths ${movingAveragePeriod} day moving average`,\n          fill: false,\n          backgroundColor: chartColors.darkGrey,\n          borderColor: chartColors.darkGrey,\n          order: 4,\n          data: movingAverageDeathsTodayChartData.slice(3, -3),\n          hidden: casesToHide['deathsTodayMovingAverage'],\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 0\n      },\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      elements: {\n        point: {\n            radius: 0\n        }\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Date'\n          },\n        }],\n        yAxes: [{\n          display: true,\n          type: dataType,\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig)\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n  \n  return (\n    <>\n    <div className=\"chart timeSeries\">\n      <canvas\n        className=\"canvas\"\n        ref={chartRef}\n      ></canvas>\n    </div>\n\n    <div className=\"btn-toolbar justify-content-end\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n      <div className=\"btn-group btn-group-toggle mr-1\" data-tip={`Moving average period in days (${movingAveragePeriod})`}>\n        <input\n          type=\"range\"\n          className=\"movingAverage custom-range\"\n          min=\"1\"\n          max={30}\n          id=\"movingAverageSlider\"\n          value={movingAveragePeriod}\n          onChange={changeEvent => { setMovingAveragePeriod(changeEvent.target.value) }}>\n        </input>\n      </div>\n      <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n        <label className={`btn btn-sm btn-light ${dataType === 'linear' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"data-type\" onClick={() => {\n            setDataType('linear')\n          }} /> Linear\n        </label>\n        <label className={`btn btn-sm btn-light ${dataType === 'logarithmic' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"data-type\" onClick={() => {\n            setDataType('logarithmic')\n          }}/> Logarithmic\n        </label>\n      </div>\n      <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n        <label className={`btn btn-sm btn-light ${chartType === 'line' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"chart-type\" onClick={() => {setChartType('line')}}/> Line\n        </label>\n        <label className={`btn btn-sm btn-light ${chartType === 'bar' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"chart-type\" onClick={() => {setChartType('bar')}}/> Bar\n        </label>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default TimeSeries\n","import React from 'react'\nimport * as timeago from 'timeago.js'\n\nconst UpdatedTimeStamp = ({ lastUpdated }) => {\n  const lastUpdatedDate = timeago.format(new Date(parseInt(lastUpdated)))\n  return (\n    <div className=\"col-sm float-right\">\n      <p className=\"lastUpdatedTimeStamp float-right\">Data last updated: <span id=\"lastUpdated\">{lastUpdatedDate}</span></p>\n    </div>\n  )\n}\n\nexport default UpdatedTimeStamp\n","import React from 'react'\n\nconst PanelDeathsToday = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-warning\" role=\"alert\">\n        <h5>New deaths today</h5>\n        <div id=\"deathsTodayCounter\" className=\"total-cases text-yellow\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelDeathsToday\n","import React from 'react'\n\nconst PanelConfirmedToday = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-purple\" role=\"alert\">\n        <h5>New confirmed cases today</h5>\n        <div id=\"confirmedTodayCounter\" className=\"total-cases text-purple\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedToday\n","import React from 'react'\n\nconst PanelConfirmedCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-danger\" role=\"alert\">\n        <h5>Total confirmed</h5>\n        <div id=\"confirmedCounter\" className=\"total-cases text-danger\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedCount\n","import React from 'react'\n\nconst PanelActiveCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-primary\" role=\"alert\">\n        <h5>Total active</h5>\n        <div id=\"activeCounter\" className=\"total-cases text-primary\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div> \n    </>\n  )\n}\n\nexport default PanelActiveCount\n","import React from 'react'\n\nconst PanelRecoveredCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-success\" role=\"alert\">\n        <h5>Total recovered</h5>\n        <div id=\"recoveredCounter\" className=\"total-cases text-success\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelRecoveredCount\n","import React from 'react'\n\nconst PanelDeathCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-dark\" role=\"alert\">\n        <h5>Total deaths</h5>\n        <div id=\"deathsCounter\" className=\"total-cases text-dark\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelDeathCount\n","import React from 'react'\n\nconst chartColors = {\n  red: 'rgb(255, 99, 132)',\n  orange: 'rgb(255, 159, 64)',\n  yellow: 'rgb(255, 205, 86)',\n  green: 'rgb(75, 192, 192)',\n  blue: 'rgb(54, 162, 235)',\n  purple: 'rgb(153, 102, 255)',\n  grey: '#b0b0b0'\n}\n\nconst ProgressBar = ({ dataSet }) => {\n\n  const percentageDataSet = dataSet.map((item, i) => {\n    const total = dataSet.reduce((count, dataItem) => {\n      return count + dataItem.data\n    }, 0)\n    if (total === 0) {\n      return 0\n    } else {\n      if (i+1 === dataSet.length) {\n        item.percentage = Math.ceil((item.data/(total))*100) - 1\n      } else {\n        item.percentage = Math.ceil((item.data/(total))*100)\n      }\n      return item\n    }\n  })\n\n  return (\n    <div className=\"progress\">\n      {percentageDataSet.map((dataItem, i) => {\n        if (dataItem.percentage > 0) {\n          return (\n            <div\n              key={i}\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              style={{width: `${dataItem.percentage}%`, backgroundColor: `${chartColors[dataItem.color]}`}}\n              aria-valuenow={dataItem.percentage}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              data-toggle=\"tooltip\" data-placement=\"top\" title={dataItem.label}\n            >\n              {dataItem.percentage}%\n            </div>\n          )\n        } else {\n          return null\n        }\n      })}\n    </div>\n  )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport ProgressBar from '../Charts/ProgressBar'\n\nconst PanelConfirmedVsActive = ({\n  data,\n  }) => {\n\n  return (\n    <>\n      <div className=\"card bg-light mb-3\">\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">Confirmed/Active</h6>\n          <ProgressBar\n              dataSet={data}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedVsActive\n","import React from 'react'\nimport ProgressBar from '../Charts/ProgressBar'\n\nconst PanelRecoveriesVsDeaths = ({\n  data,\n  }) => {\n\n  return (\n    <>\n      <div className=\"card bg-light mb-3\">\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">Recoveries/Deaths</h6>\n            <ProgressBar\n              dataSet={data}\n            />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelRecoveriesVsDeaths\n","import React, { Component } from 'react'\nimport Datamap from 'datamaps/dist/datamaps.world.min.js'\nimport d3 from 'd3'\nimport './WorldHeatMap.css'\n\nclass WorldHeatMap extends Component {\n\n  isValidCase(caseNumberToParse) {\n    if (caseNumberToParse >= 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem) {\n    const heatMapData = []\n    casesByLocationWithNoProvince.forEach((item, i) => {\n      if (item.countryCode) {\n        let mainCaseNumberToShow = parseInt(item[caseType])\n        if (!showMoreThanOneDataItem) {\n          return heatMapData.push([\n            item.countryCode,\n            this.isValidCase(mainCaseNumberToShow) ? mainCaseNumberToShow : 0\n          ])\n        } else if (showMoreThanOneDataItem) {\n          return heatMapData.push([\n            item.countryCode, \n            mainCaseNumberToShow,\n            parseInt(item.confirmedCasesToday), \n            parseInt(item.active) || 'N/A',\n            parseInt(item.recovered) || 'N/A',\n            parseInt(item.deaths), \n            parseInt(item.deathsToday)\n          ])\n        }\n      }\n    })\n    \n    // Datamaps expect data in format:\n    // { \"USA\": { \"fillColor\": \"#42a844\", numberOfWhatever: 75},\n    //   \"FRA\": { \"fillColor\": \"#8dc386\", numberOfWhatever: 43 } }\n    let dataset = {}\n\n    // We need to colorize every country based on \"numberOfWhatever\"\n    // colors should be uniq for every value.\n    // For this purpose we create palette(using min/max this.props.data-value)\n    let onlyValues = heatMapData.map(function (obj) { return obj[1] })\n    let minValue = Math.min.apply(null, onlyValues),\n      maxValue = Math.max.apply(null, onlyValues)\n\n    // create color palette function\n    // color can be whatever you wish\n    let paletteScale = d3.scale.linear()\n      .domain([minValue, maxValue])\n      .range([lightColour, darkColour])\n\n    // fill dataset in appropriate format\n    heatMapData.forEach(function (item) { //\n      // item example value [\"USA\", 70]\n      let iso = item[0],\n      value = item[1]\n      if (showMoreThanOneDataItem) {\n        let confirmedCasesToday = item[2]\n        let active = item[3]\n        let recovered = item[4]\n        let deaths = item[5]\n        let deathsToday = item[6]\n        dataset[iso] = {\n          caseCount: value,\n          confirmedCasesToday,\n          active,\n          recovered,\n          deaths,\n          deathsToday,\n          fillColor: paletteScale(value),\n        }\n      } else {\n        dataset[iso] = { caseCount: value, fillColor: paletteScale(value) }\n      }\n    })\n\n    return dataset\n  }\n\n  generateNewMap(dataset ,mapDataLabel, showMoreThanOneDataItem) {\n    const datamap = new Datamap({\n      element: document.getElementById(`choroplethMap-${mapDataLabel}`),\n      projection: 'mercator', // big world map\n      // countries don't listed in dataset will be painted with this color\n      fills: { defaultFill: '#F5F5F5' },\n      data: dataset,\n      geographyConfig: {\n        borderColor: '#DEDEDE',\n        highlightBorderWidth: 2,\n        // don't change color on mouse hover\n        highlightFillColor: function(geo) {\n          return geo['fillColor'] || '#F5F5F5'\n        },\n        // only change border\n        highlightBorderColor: '#B7B7B7',\n        // show desired information in tooltip\n        popupTemplate: function(geo, data) {\n          // don't show tooltip if country don't present in dataset\n          let tooltipHtml = `\n          <div class=\"hoverinfo\">\n            <strong>${geo.properties.name}</strong>\n            <br>${mapDataLabel}: <span>N/A</span>\n          </div>`\n          if (data && !showMoreThanOneDataItem) {\n            tooltipHtml = `\n            <div class=\"hoverinfo\">\n              <strong>${geo.properties.name}</strong>\n              <br>${mapDataLabel}: <strong>${data.caseCount.toLocaleString()}</strong>\n            </div>`\n          } else if (data && showMoreThanOneDataItem) {\n            tooltipHtml = `\n            <div class=\"hoverinfo\">\n              <strong>${geo.properties.name}</strong>\n              <br>${mapDataLabel}: <strong>${data.caseCount.toLocaleString()}</strong>\n              <br>Confirmed today: <span>${data.confirmedCasesToday.toLocaleString()}</span>\n              <br>Active: <span>${data.active.toLocaleString()}</span>\n              <br>Recovered: <span>${data.recovered.toLocaleString()}</span>\n              <br>Deaths: <span>${data.deaths.toLocaleString()}</span>\n              <br>Deaths today: <span>${data.deathsToday.toLocaleString()}</span>\n            </div>`\n          }\n          return tooltipHtml\n        }\n      }\n    })\n    return datamap\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      const casesByLocationWithNoProvince = this.props.data\n      const lightColour = this.props.lightColour\n      const darkColour = this.props.darkColour\n      const caseType = this.props.caseType\n      const showMoreThanOneDataItem = this.props.showMoreThanOneDataItem || false\n      const mapData = this.processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem)\n      this.map.updateChoropleth(mapData)\n    }\n  }\n\n  componentDidMount() {\n    const casesByLocationWithNoProvince = this.props.data\n    const mapDataLabel = this.props.mapDataLabel\n    const lightColour = this.props.lightColour\n    const darkColour = this.props.darkColour\n    const caseType = this.props.caseType\n    const showMoreThanOneDataItem = this.props.showMoreThanOneDataItem || false\n    const mapData = this.processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem)\n    this.map = this.generateNewMap(mapData, mapDataLabel, showMoreThanOneDataItem)\n  }\n\n  render() {\n    const mapDataLabel = this.props.mapDataLabel\n    return (\n      <>\n        <div id={`choroplethMap-${mapDataLabel}`} className=\"choroplethMap\"></div>\n      </>\n    )\n  }\n}\nexport default WorldHeatMap\n","import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport _ from 'lodash'\n\nimport WorldHeatMap from './WorldHeatMap'\n\nconst getGlobalCasesGivenDate = gql`\nquery Test($day: String!) {\n  getGlobalCasesByDate(day: $day) {\n    countryCode\n    confirmed\n    active\n    recovered\n    deaths\n    confirmedCasesToday\n    deathsToday\n  }\n}\n`\n\nconst clamp = (number, min, max) => {\n  return Math.min(Math.max(number, min), max)\n}\n\nlet datesVisited = []\n\nconst HeatMapRangeSlider = ({ dates }) => {\n  const timeSeriesLength = dates.length\n  const [ sliderValue, setSliderValue ] = useState(timeSeriesLength)\n  const [globalCasesByDate, setGlobalCasesByDate] = useState([])\n\n  datesVisited[sliderValue] = true\n\n  let currentDay = dates[sliderValue-1]\n  let currentDayAsDate = new Date(currentDay)\n  // const { loading, error, data, client } = useQuery(getGlobalCasesGivenDate, {\n  //   variables: { day: currentDay },\n  // })\n\n  const getData = (day) => {\n    fetch(`http://localhost:4000/resttest?day=${day}`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        console.log(result)\n        // getGlobalCasesByDate = result\n        setGlobalCasesByDate(result)\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        console.log(error);\n        \n      }\n    )\n  }\n\n  // useEffect(() => {\n  //   fetch(`http://localhost:4000/resttest?day=${currentDay}`)\n  //     .then(res => res.json())\n  //     .then(\n  //       (result) => {\n  //         console.log(result)\n  //         // getGlobalCasesByDate = result\n  //         setGlobalCasesByDate(result)\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         console.log(error);\n          \n  //       }\n  //     )\n  // }, [currentDay])\n\n\n  // const prefetchLastFewDays = (sliderValueToPrefetch) => {\n  //   sliderValueToPrefetch = parseInt(sliderValueToPrefetch)\n  //   const MAX_TO_PREFETCH = 5\n\n  //   let rangeBefore = clamp(sliderValueToPrefetch - MAX_TO_PREFETCH, 0, timeSeriesLength)\n  //   let rangeAfter = clamp(sliderValueToPrefetch + MAX_TO_PREFETCH, 0, timeSeriesLength)\n  //   for (let i = rangeBefore; i < rangeAfter; i++) {\n  //     const dateVisited = datesVisited[i]\n  //     if (!dateVisited) {\n  //       let dayToQuery = dates[i]\n  //       client.query({\n  //         query: getGlobalCasesGivenDate,\n  //         variables: { day: dayToQuery }\n  //       })\n  //       datesVisited[i] = true\n  //     }\n  //   }\n  // }\n\n  const moveSlider = (newSliderValue) => {\n    setSliderValue(newSliderValue)\n    getData(currentDay)\n    // prefetchLastFewDays(newSliderValue)\n    // _.debounce(() => { prefetchLastFewDays(newSliderValue) }, 200)\n  }\n\n  let content = (\n    <WorldHeatMap\n      mapDataLabel=\"Confirmed\"\n      showMoreThanOneDataItem={true}\n      caseType=\"confirmed\"\n      data={globalCasesByDate}\n      date={currentDay}\n      lightColour=\"#ffeaef\" \n      darkColour=\"#ff6384\"\n    />\n  )\n  // if (loading) {\n  //   content = (\n  //     <WorldHeatMap mapDataLabel=\"Confirmed\" showMoreThanOneDataItem={true} caseType=\"confirmed\" data={[]} date={\"\"} lightColour=\"#ffeaef\" darkColour=\"#ff6384\"/>\n  //   )\n  // } else if (error) {\n  //   content = (<p>{JSON.stringify(error, null, 2)}</p>)\n  // } else {\n  //   const getGlobalCasesByDate = data.getGlobalCasesByDate\n  //   content = (\n  //     <WorldHeatMap mapDataLabel=\"Confirmed\" showMoreThanOneDataItem={true} caseType=\"confirmed\" data={getGlobalCasesByDate} date={currentDay} lightColour=\"#ffeaef\" darkColour=\"#ff6384\"/>\n  //   )\n  // }\n\n  return (\n    <>\n    <div className=\"card bg-light mb-3\">\n      <div className=\"card-body pt-0\">\n        {content}\n        <div className=\"heatmapSliderHeader d-flex justify-content-end\">\n          <span>Confirmed cases on <strong>{currentDayAsDate.toLocaleDateString()}</strong></span>\n        </div>\n        <div className=\"heatmapSliderControls\">\n          <input type=\"range\" className=\"heatMap custom-range\" min=\"1\" max={timeSeriesLength} id=\"heatMapDateSlider\" value={sliderValue}\n            // onMouseOver={() => {prefetchLastFewDays(sliderValue)}}\n            onChange={changeEvent => { moveSlider(changeEvent.target.value) }}>\n          </input>\n        </div>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default HeatMapRangeSlider\n","import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\nconst TopXBarGraph = ({ data, id, chartTitle, chartLabel, chartLabelKey, labelColor }) => {\n  const chartRef = React.createRef()\n\n  const dataArray = data.map(element => ({ x: element.country, y: element[chartLabelKey] }))\n  const countries = data.map(element => element.country)\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }\n\n  const chartLabelColor = chartColors[labelColor]\n  \n  const chartConfig = {\n    type: 'bar',\n    data: {\n      labels: countries,\n      datasets: [\n        {\n          label: chartLabel,\n          backgroundColor: chartLabelColor,\n          borderColor: chartLabelColor,\n          data: dataArray,\n          fill: false,\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        labels: false\n      },\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Country'\n          }\n        }],\n        yAxes: [{\n          display: true,\n          type: 'linear',\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig)\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n\n  return (\n    <div className=\"col-sm\">\n      <div className=\"chart barGraph topx\" id={id}>\n        <canvas\n          id={`canvas`}\n          ref={chartRef}\n        ></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default TopXBarGraph\n","import React from 'react'\nimport TopXBarGraph from '../Charts/TopXBarGraph'\n\nconst isGreaterThanZero = (array, key) => {\n  return array.filter((element) => { return element[key] > 0 })\n}\n\nconst PanelTopX = ({ data, includeToday }) => {\n\n  return (\n    <>\n      <div className=\"row\">\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXconfirmedByCountry.data, 'confirmed')}\n          id=\"top5confirmed\"\n          chartTitle={data.topXconfirmedByCountry.label}\n          chartLabel=\"Confirmed\"\n          chartLabelKey=\"confirmed\"\n          labelColor=\"red\"\n        />\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXactiveByCountry.data, 'active')}\n          id=\"top5active\"\n          chartTitle={data.topXactiveByCountry.label}\n          chartLabel=\"Active\"\n          chartLabelKey=\"active\"\n          labelColor=\"blue\"\n        />\n      </div>\n      <div className=\"row\">\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXrecoveredByCountry.data, 'recovered')}\n          id=\"top5recovered\"\n          chartTitle={data.topXrecoveredByCountry.label}\n          chartLabel=\"Recovered\"\n          chartLabelKey=\"recovered\"\n          labelColor=\"green\"\n        />\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXdeathsByCountry.data, 'deaths')}\n          id=\"top5deaths\"\n          chartTitle={data.topXdeathsByCountry.label}\n          chartLabel=\"Deaths\"\n          chartLabelKey=\"deaths\"\n          labelColor=\"grey\"\n        />\n      </div>\n      {includeToday &&\n        <div className=\"row\">\n          <TopXBarGraph\n            data={isGreaterThanZero(data.topXconfirmedTodayByCountry.data, 'confirmedCasesToday')}\n            id=\"top5recovered\"\n            chartTitle={data.topXconfirmedTodayByCountry.label}\n            chartLabel=\"Confirmed cases today\"\n            chartLabelKey=\"confirmedCasesToday\"\n            labelColor=\"purple\"\n          />\n          <TopXBarGraph\n            data={isGreaterThanZero(data.topXdeathsTodayByCountry.data, 'deathsToday')}\n            id=\"top5deaths\"\n            chartTitle={data.topXdeathsTodayByCountry.label}\n            chartLabel=\"Deaths today\"\n            chartLabelKey=\"deathsToday\"\n            labelColor=\"yellow\"\n          />\n        </div>\n      }\n    </>\n  )\n}\n\nexport default PanelTopX\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport TimeSeries from '../Charts/TimeSeries'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelDeathsToday from '../Panels/PanelDeathsToday'\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday'\nimport PanelConfirmedCount from '../Panels/PanelConfirmedCount'\nimport PanelActiveCount from '../Panels/PanelActiveCount'\nimport PanelRecoveredCount from '../Panels/PanelRecoveredCount'\nimport PanelDeathCount from '../Panels/PanelDeathCount'\nimport PanelConfirmedVsActive from '../Panels/PanelConfirmedVsActive'\nimport PanelRecoveriesVsDeaths from '../Panels/PanelRecoveriesVsDeaths'\nimport HeatMapRangeSlider from '../WorldHeatMap/HeatMapRangeSlider'\nimport PanelTopX from '../Panels/PanelTopX'\n\nconst COVID_GLOBAL_PAGE = gql`\n  query {\n    totalCases {\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n    }\n    globalTimeSeries {\n      confirmed\n      deaths\n      confirmedCasesToday\n      deathsToday\n      day\n    }\n    getAllDaysWithCases\n    topXconfirmedByCountry(limit: 5) {\n      country\n      confirmed\n    }\n    topXactiveByCountry(limit: 5) {\n      country\n      active\n    }\n    topXrecoveredByCountry(limit: 5) {\n      country\n      recovered\n    }\n    topXdeathsByCountry(limit: 5) {\n      country\n      deaths\n    }\n  }\n`\n\nconst InnerPage = ({\n   title,\n   lastUpdated,\n  }) => {\n  const { loading, error, data } = useQuery(COVID_GLOBAL_PAGE)\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const totalCases = data.totalCases\n  const globalTimeSeries = data.globalTimeSeries\n  const getAllDaysWithCases = data.getAllDaysWithCases\n  const topXdata = {\n    topXconfirmedByCountry: {data: data.topXconfirmedByCountry, label: 'Top 5 confirmed by country'},\n    topXactiveByCountry: {data: data.topXactiveByCountry, label: 'Top 5 active by country'},\n    topXrecoveredByCountry: {data: data.topXrecoveredByCountry, label: 'Top 5 recovered by country'},\n    topXdeathsByCountry: {data: data.topXdeathsByCountry, label: 'Top 5 deaths by country'},\n  }\n\n  const confirmedVsActiveProgressBar = [\n    {\n      data: totalCases.confirmed,\n      label: 'confirmed',\n      color: 'red',\n    },\n    {\n      data: totalCases.confirmed - totalCases.active,\n      label: 'active',\n      color: 'blue',\n    },\n  ]\n\n  const recoveredVsDeathsProgressBar = [\n    {\n      data: totalCases.recovered,\n      label: 'recovered',\n      color: 'green',\n    },\n    {\n      data: totalCases.deaths,\n      label: 'deaths',\n      color: 'grey',\n    },\n  ]\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedCount caseCount={totalCases.confirmed}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelActiveCount caseCount={totalCases.active}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveredCount caseCount={totalCases.recovered}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathCount caseCount={totalCases.deaths}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={totalCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={totalCases.deathsToday} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedVsActive data={confirmedVsActiveProgressBar}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveriesVsDeaths data={recoveredVsDeathsProgressBar}/>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <HeatMapRangeSlider dates={getAllDaysWithCases}/>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <TimeSeries\n            chartTitle=\"Global time series cases by day\"\n            casesToHide={ {\n              confirmed: false,\n              deaths: false,\n              confirmedToday: false,\n              confirmedTodayMovingAverage: true,\n              deathsToday: false,\n              deathsTodayMovingAverage: true,\n            } }\n            data={globalTimeSeries}\n            currentCases={totalCases}\n          />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <TimeSeries\n            chartTitle=\"Global time series daily cases by day\"\n            casesToHide={ {\n              confirmed: true,\n              deaths: true,\n              confirmedToday: false,\n              confirmedTodayMovingAverage: false,\n              deathsToday: false,\n              deathsTodayMovingAverage: false,\n            } }\n            data={globalTimeSeries}\n            currentCases={totalCases}\n          />\n        </div>\n      </div>\n\n      <PanelTopX data={topXdata}/>\n    </>\n  )\n}\n\nexport default InnerPage\n","import React from 'react'\nimport {\n  useParams\n} from \"react-router-dom\";\n\nconst InnerPage = (data) => {\n  let { id } = useParams()\n\n  return (\n    <>\n      <div id={id} className=\"\">\n        <h3>Page cannot not found</h3>\n      </div>\n      <br></br>\n      <div className=\"container-xl\">\n        <p>The page at \"<strong>/{id}</strong>\" cannot be found.</p>\n      </div>\n    </>\n  )\n}\n\nexport default InnerPage\n","import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\nconst ProvincesBarGraph = ({ countryName, data, id, }) => {\n  const chartRef = React.createRef()\n\n  const confirmedDataArray = []\n  const confirmedTodayDataArray = []\n  const activeDataArray = []\n  const recoveredDataArray = []\n  const deathsDataArray = []\n  const deathsTodayDataArray = []\n  const provinces = []\n\n  data.forEach(element => {\n    if (element.province !== 'mainland' && element.province !== countryName) {\n      confirmedDataArray.push({ x: element.province, y: element.confirmed })\n      confirmedTodayDataArray.push({ x: element.province, y: element.confirmedCasesToday })\n      activeDataArray.push({ x: element.province, y: element.active })\n      recoveredDataArray.push({ x: element.province, y: element.recovered })\n      deathsDataArray.push({ x: element.province, y: element.deaths })\n      deathsTodayDataArray.push({ x: element.province, y: element.deathsToday })\n      provinces.push(element.province)\n    }\n  })\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }\n  \n  const chartConfig = {\n    type: 'bar',\n    data: {\n      labels: provinces,\n      datasets: [\n        {\n          label: 'Confirmed',\n          backgroundColor: chartColors.red,\n          borderColor: chartColors.red,\n          data: confirmedDataArray,\n          fill: false,\n          hidden: false,\n        },\n        {\n          label: 'Active',\n          backgroundColor: chartColors.blue,\n          borderColor: chartColors.blue,\n          data: activeDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Recovered',\n          backgroundColor: chartColors.green,\n          borderColor: chartColors.green,\n          data: recoveredDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Deaths',\n          backgroundColor: chartColors.grey,\n          borderColor: chartColors.grey,\n          data: deathsDataArray,\n          fill: false,\n          hidden: false,\n        },\n        {\n          label: 'Confirmed today',\n          backgroundColor: chartColors.purple,\n          borderColor: chartColors.purple,\n          data: confirmedTodayDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Deaths today',\n          backgroundColor: chartColors.yellow,\n          borderColor: chartColors.yellow,\n          data: deathsTodayDataArray,\n          fill: false,\n          hidden: true,\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        labels: false\n      },\n      title: {\n        display: true,\n        text: `Cases by each province/state of ${countryName}`\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Province/state'\n          }\n        }],\n        yAxes: [{\n          display: true,\n          type: 'linear',\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig);\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n\n  return (\n    <div className=\"col-sm\">\n      <div className=\"chart provinces barGraph\" id={id}>\n        <canvas\n          id={`canvas`}\n          ref={chartRef}\n        ></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default ProvincesBarGraph\n","import React from 'react'\nimport {\n  Link,\n} from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport ProvincesBarGraph from '../Charts/ProvincesBarGraph'\n\nconst getProvincesGivenCountryName = (countryName) => gql`\n  query {\n    getProvincesGivenCountryName(country: \"${countryName}\") {\n      province\n      idKey\n      active\n      confirmed\n      deaths\n      confirmedCasesToday\n      deathsToday\n      recovered\n    }\n  }\n`\n\nconst ProvincesMenu = ({ countryName, idKey }) => {\n  const { loading, error, data } = useQuery(getProvincesGivenCountryName(countryName))\n  if (loading) return <p>Loading provinces data ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  let provinceList = []\n  if (data) {\n    let countryAsProvince = [{ idKey: countryName.replace(/,/g, '').replace(/\\s+/g, '-').toLowerCase(), province: countryName}]\n    provinceList = countryAsProvince.concat(data.getProvincesGivenCountryName)\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm provinceNav\">\n          {provinceList.length > 0 &&\n            <ul className=\"nav\">\n              {provinceList.map((provinceKey, i) => {\n                let className = \"nav-item provinceNavLink\"\n                if (provinceKey.idKey === idKey) {\n                  className = \"nav-item provinceNavLink active disabled\"\n                }\n                return (<li className={className} key={i}>\n                <Link className=\"nav-link\" to={provinceKey.idKey}>{`${provinceKey.province}`}</Link>\n              </li>)\n              })}\n            </ul>\n          }\n        </div>\n      </div>\n      <div className=\"row\">\n        <ProvincesBarGraph countryName={countryName} data={provinceList} id=\"provinceBarChart\"/>\n      </div>\n    </>\n  )\n}\n\nexport default ProvincesMenu\n","import React from 'react'\nimport {\n  useParams\n} from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport CountryNotFound from './CountryNotFound'\nimport TimeSeries from '../Charts/TimeSeries'\n// import TopXBarGraph from './TopXBarGraph'\n// import PieChart from '../components/PieChart'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp';\nimport ProvincesMenu from '../Nav/ProvincesMenu';\nimport PanelConfirmedCount from '../Panels/PanelConfirmedCount';\nimport PanelActiveCount from '../Panels/PanelActiveCount';\nimport PanelRecoveredCount from '../Panels/PanelRecoveredCount';\nimport PanelDeathCount from '../Panels/PanelDeathCount';\nimport PanelDeathsToday from '../Panels/PanelDeathsToday';\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday';\nimport PanelConfirmedVsActive from '../Panels/PanelConfirmedVsActive';\nimport PanelRecoveriesVsDeaths from '../Panels/PanelRecoveriesVsDeaths';\n\nconst getCountry = (idKey) => gql`\n  query {\n    getCasesByIdKey(idKey: \"${idKey}\"){\n      country\n      province\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n      latitude\n      longitude\n      lastUpdate\n      casesByDate {\n        confirmed\n        deaths\n        confirmedCasesToday\n        deathsToday\n        day\n      }\n      provincesList {\n        idKey\n        province\n      }\n      hasProvince\n    }\n  }\n`\n\nconst InnerPage = (pData) => {\n  let { id } = useParams()\n  const { loading, error, data } = useQuery(getCountry(id))\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  let getCasesByIdKey = data && data.getCasesByIdKey[0]\n\n  if (!getCasesByIdKey) {\n    return ( <CountryNotFound /> )\n  }\n  let lastUpdated = getCasesByIdKey.lastUpdate\n  let idKey = id\n\n  const genPageTitle = (country, province) => {\n    if (province) {\n      return `${country} - ${province}`\n    } else {\n      return `${country}`\n    }\n  }\n\n  const confirmedVsActiveProgressBar = [\n    {\n      data: getCasesByIdKey.confirmed,\n      label: 'confirmed',\n      color: 'red',\n    },\n    {\n      data: getCasesByIdKey.confirmed - getCasesByIdKey.active,\n      label: 'active',\n      color: 'blue',\n    },\n  ]\n\n  const recoveredVsDeathsProgressBar = [\n    {\n      data: getCasesByIdKey.recovered,\n      label: 'recovered',\n      color: 'green',\n    },\n    {\n      data: getCasesByIdKey.deaths,\n      label: 'deaths',\n      color: 'grey',\n    },\n  ]\n\n  const currentCases = {\n    confirmed: getCasesByIdKey.confirmed,\n    active: getCasesByIdKey.active,\n    recovered: getCasesByIdKey.recovered,\n    deaths: getCasesByIdKey.deaths,\n    confirmedCasesToday: getCasesByIdKey.confirmedCasesToday,\n    deathsToday: getCasesByIdKey.deathsToday,\n  }\n\n  const pageTitle = genPageTitle(getCasesByIdKey.country, getCasesByIdKey.province)\n\n  return (\n    <>\n      <div id={idKey} className=\"\">\n        <h3>{pageTitle}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedCount caseCount={currentCases.confirmed}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelActiveCount caseCount={currentCases.active}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveredCount caseCount={currentCases.recovered}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathCount caseCount={currentCases.deaths}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={currentCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={currentCases.deathsToday}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedVsActive data={confirmedVsActiveProgressBar}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveriesVsDeaths data={recoveredVsDeathsProgressBar}/>\n        </div>\n      </div>\n\n      {\n        (getCasesByIdKey.province || getCasesByIdKey.hasProvince) &&\n        <ProvincesMenu countryName={getCasesByIdKey.country} idKey={idKey}/>\n      }\n\n      {getCasesByIdKey.casesByDate &&\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <TimeSeries\n              chartTitle={ `Time series cases by day for ${pageTitle}` }\n              casesToHide={ {\n                confirmed: false,\n                deaths: false,\n                confirmedToday: false,\n                confirmedTodayMovingAverage: true,\n                deathsToday: false,\n                deathsTodayMovingAverage: true,\n              } }\n              data={getCasesByIdKey.casesByDate}\n              currentCases={currentCases}\n            />\n          </div>\n        </div>\n      }\n      <br/>\n      {getCasesByIdKey.casesByDate &&\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <TimeSeries\n              chartTitle={ `Time series daily cases by day for ${pageTitle}` }\n              casesToHide={ {\n                confirmed: true,\n                deaths: true,\n                confirmedToday: false,\n                confirmedTodayMovingAverage: false,\n                deathsToday: false,\n                deathsTodayMovingAverage: false,\n              } }\n              data={getCasesByIdKey.casesByDate}\n              currentCases={currentCases}\n            />\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n\nexport default InnerPage\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelTopX from '../Panels/PanelTopX'\n\nconst getTopCases = gql`\nquery TopCases($limit: Int!) {\n    topXconfirmedByCountry(limit: $limit) {\n      country\n      confirmed\n    }\n    topXactiveByCountry(limit: $limit) {\n      country\n      active\n    }\n    topXrecoveredByCountry(limit: $limit) {\n      country\n      recovered\n    }\n    topXdeathsByCountry(limit: $limit) {\n      country\n      deaths\n    }\n    topXconfirmedTodayByCountry(limit: $limit) {\n      country\n      confirmedCasesToday\n    }\n    topXdeathsTodayByCountry(limit: $limit) {\n      country\n      deathsToday\n    }\n  }\n`\n\nconst topCaseOptions = [ 5, 10, 15, 20 ]\nlet topLimitState = topCaseOptions[1]\n\nconst TopCasesInnerPage = ({ lastUpdated, }) => {\n  const [ topLimit, setTopLimit] = useState(topLimitState)\n  topLimitState = topLimit\n  const { loading, error, data, client } = useQuery(getTopCases, {\n    variables: { limit: topLimit },\n  })\n\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const prefetchTopCases = () => {\n    topCaseOptions.forEach(topCaseLimit => {\n      client.query({\n        query: getTopCases,\n        variables: { limit: topCaseLimit },\n      })\n    })\n  }\n\n  const topXdata = {\n    topXconfirmedByCountry: {data: data.topXconfirmedByCountry, label: `Top ${topLimit} confirmed by country`},\n    topXactiveByCountry: {data: data.topXactiveByCountry, label: `Top ${topLimit} active by country`},\n    topXrecoveredByCountry: {data: data.topXrecoveredByCountry, label: `Top ${topLimit} recovered by country`},\n    topXdeathsByCountry: {data: data.topXdeathsByCountry, label: `Top ${topLimit} deaths by country`},\n    topXconfirmedTodayByCountry: {data: data.topXconfirmedTodayByCountry, label: `Top ${topLimit} confirmed cases today by country`},\n    topXdeathsTodayByCountry: {data: data.topXdeathsTodayByCountry, label: `Top ${topLimit} deaths today by country`},\n  }\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>Top {topLimit} cases globally</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\" onMouseOver={() => {prefetchTopCases()}}>\n              {topCaseOptions.map((item) => {\n                return  (\n                <label key={item} className={`btn btn-sm btn-light ${topLimit === item ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setTopLimit(item)}}/> Top {item}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"top-tab-container\">\n        <PanelTopX data={topXdata} includeToday={true} />\n      </div>\n    </>\n  )\n}\n\nexport default TopCasesInnerPage\n","import React, { useState } from 'react'\nimport TopXBarGraph from '../Charts/TopXBarGraph'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday'\nimport PanelDeathsToday from '../Panels/PanelDeathsToday'\nimport WorldHeatMap from '../WorldHeatMap/WorldHeatMap'\n\nconst getTopCases = () => gql`\n  query {\n    totalCases {\n      confirmedCasesToday\n      deathsToday\n    }\n    topXconfirmedTodayByCountry(limit: 10) {\n      country\n      confirmedCasesToday\n    }\n    topXdeathsTodayByCountry(limit: 10) {\n      country\n      deathsToday\n    }\n    casesByLocationWithNoProvince {\n      countryCode\n      confirmedCasesToday\n      deathsToday\n    }\n  }\n`\n\nconst isGreaterThanZero = (array, key) => {\n  return array.filter((element) => { return element[key] > 0 })\n}\n\nconst caseMaps = {\n  confirmedCasesToday: {\n    label: 'Confirmed cases today',\n    lightColour: \"#efedf5\",\n    darkColour:\"#756bb1\",\n    textClassName: 'confirmedTodayText'\n  },\n  deathsToday: {\n    label: 'Confirmed deaths today',\n    lightColour: \"#fff7bc\",\n    darkColour:\"#d95f0e\",\n    textClassName: 'deathsTodayText'\n  },\n}\n\nlet caseTypeState = 'confirmedCasesToday'\n\nconst TodayInnerPage = ({ title, lastUpdated }) => {\n  const [ caseType, setCaseType] = useState(caseTypeState)\n  caseTypeState = caseType\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const totalCases = data.totalCases\n  const casesByLocationWithNoProvince = data.casesByLocationWithNoProvince\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title} | {(new Date()).toLocaleDateString()}</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={totalCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={totalCases.deathsToday}/>\n        </div>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n              {Object.keys(caseMaps).map((caseKey) => {\n                const item = caseMaps[caseKey]\n                return  (\n                <label key={item.label} className={`btn btn-sm btn-light ${caseType === caseKey ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setCaseType(caseKey)}}/>{item.label}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <WorldHeatMap\n            mapDataLabel=\"Cases\"\n            caseType={caseType}\n            date={caseType}\n            data={casesByLocationWithNoProvince}\n            lightColour={caseMaps[caseType].lightColour}\n            darkColour={caseMaps[caseType].darkColour}\n          />\n        </div>\n      </div>\n\n      <div className=\"row multiTopBar\">\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXconfirmedTodayByCountry, 'confirmedCasesToday')}\n          id=\"top10confirmedToday\"\n          chartTitle=\"Top 10 confirmed cases today by country\"\n          chartLabel=\"Confirmed cases today\"\n          chartLabelKey=\"confirmedCasesToday\"\n          labelColor=\"purple\"\n        />\n\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXdeathsTodayByCountry, 'deathsToday')}\n          id=\"top10deathsToday\"\n          chartTitle=\"Top 10 deaths today by country\"\n          chartLabel=\"Deaths today\"\n          chartLabelKey=\"deathsToday\"\n          labelColor=\"yellow\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default TodayInnerPage\n","import React from 'react'\n\nconst Footer = () => {\n\n  return (\n    <>\n      <footer className=\"footer col-md-10 float-right mt-5 py-3\">\n        <div className=\"container pull-left\">\n          <span className=\"text-muted\">\n            Data sources: <a href=\"https://github.com/CSSEGISandData/COVID-19\">JHU CSSE</a>,&nbsp;\n            <a href=\"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">John Hopkins University</a>&nbsp;\n          </span>\n        </div>\n        <div className=\"container pull-right\">\n          <span className=\"text-muted\">Made by: <a href=\"https://github.com/mukundbhudia\">Mukund</a>,&nbsp;\n            <a href=\"https://github.com/salomao-rodrigues\">Sal</a>&nbsp;\n          </span>\n        </div>\n      </footer>\n    </>\n  )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport WorldHeatMap from '../WorldHeatMap/WorldHeatMap'\n\nconst getTopCases = () => gql`\n  query {\n    casesByLocationWithNoProvince {\n      countryCode\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n    }\n  }\n`\n\nconst caseMaps = {\n  confirmed: {\n    label: 'Confirmed',\n    lightColour: \"#fee0d2\",\n    darkColour:\"#de2d26\",\n    textClassName: 'confirmedText'\n  },\n  active: {\n    label: 'Active',\n    lightColour: \"#deebf7\",\n    darkColour:\"#3182bd\",\n    textClassName: 'activeText'\n  },\n  recovered: {\n    label: 'Recovered',\n    lightColour: \"#e5f5e0\",\n    darkColour:\"#31a354\",\n    textClassName: 'recoveredText'\n  },\n  deaths: {\n    label: 'Deaths',\n    lightColour: \"#f0f0f0\",\n    darkColour:\"#636363\",\n    textClassName: 'deathsText'\n  },\n  confirmedCasesToday: {\n    label: 'Confirmed today',\n    lightColour: \"#efedf5\",\n    darkColour:\"#756bb1\",\n    textClassName: 'confirmedTodayText'\n  },\n  deathsToday: {\n    label: 'Deaths today',\n    lightColour: \"#fff7bc\",\n    darkColour:\"#d95f0e\",\n    textClassName: 'deathsTodayText'\n  },\n}\n\nlet caseTypeState = 'confirmed'\n\nconst HeatMapsInnerPage = ({ title, lastUpdated }) => {\n  const [ caseType, setCaseType] = useState(caseTypeState)\n  caseTypeState = caseType\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const casesByLocationWithNoProvince = data.casesByLocationWithNoProvince\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n              {Object.keys(caseMaps).map((caseKey) => {\n                const item = caseMaps[caseKey]\n                return  (\n                <label key={item.label} className={`btn btn-sm btn-light ${caseType === caseKey ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setCaseType(caseKey)}}/>{item.label}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <WorldHeatMap\n            mapDataLabel=\"Cases\"\n            caseType={caseType}\n            date={caseType}\n            data={casesByLocationWithNoProvince}\n            lightColour={caseMaps[caseType].lightColour}\n            darkColour={caseMaps[caseType].darkColour}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default HeatMapsInnerPage\n","import React from 'react'\nimport {\n  Link,\n  useRouteMatch,\n} from 'react-router-dom'\n\nconst iconMap = {\n  home: `<path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline>`,\n  chart: `<line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line><line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>`,\n  report: `<polygon points=\"12 2 2 7 12 12 22 7 12 2\"></polygon><polyline points=\"2 17 12 22 22 17\"></polyline><polyline points=\"2 12 12 17 22 12\"></polyline>`,\n}\n\nconst NavLink = ({ path, label, icon }) => {  \n  let match = useRouteMatch({\n    path: path,\n    exact: true,\n  })\n\n  return (\n    <>\n    <Link className={match && match.path === path ? \"nav-link active\" : \"nav-link\"} to={path}>\n      {icon && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-home\" dangerouslySetInnerHTML={{__html: iconMap[icon]}}></svg>}\n      {label}\n    </Link>\n    </>\n  )\n}\n\nexport default NavLink\n","import React from 'react'\nimport {\n  useHistory,\n} from \"react-router-dom\"\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport './InputSearch.css'\n\nconst InputSearch = ({data}) => {\n  const ref = React.createRef();\n  const state = {\n    disabled: false,\n    dropup: false,\n    flip: false,\n    highlightOnlyResult: false,\n    minLength: 2,\n    open: undefined,\n    // selectHintOnEnter: false,\n  }\n\n  const onBlur = (value) => {\n    console.log(value);\n    console.log(ref.current);\n    \n  }\n\n  let history = useHistory()\n    return (\n      <>\n        <Typeahead\n          {...state}\n          ref={ref}\n          labelKey={(option) => {\n            let label = option.country\n            if (option.province !== null) {\n              label = label + ` - ${option.province}`\n            }\n            return label\n          }}\n          onChange={(selected) => {\n            if (selected[0]) {\n              history.push(`/${selected[0].idKey}`)\n            }\n          }}\n          onBlur={ onBlur }\n          options={data}\n          className=\"w-100\" id=\"searchBox\" type=\"text\" placeholder=\"Search for a country, state, province...\" aria-label=\"Search\"\n        />\n      </>\n    )\n}\n\nexport default InputSearch\n","import React, { useState } from 'react'\nimport NavLink from './NavLink'\nimport InputSearch from './InputSearch/InputSearch'\n\nconst NavBar = ({ searchData }) => {\n  const [ collapsed, setCollapsed] = useState(true)\n\n  let classOne = collapsed ? 'collapse navbar-collapse' : 'collapse navbar-collapse show'\n  let classTwo = collapsed ? 'navbar-toggler collapsed' : 'navbar-toggler'\n\n  const toggleNavbar = () => {\n    if (collapsed === true) {\n      setCollapsed(false)\n    } else {\n      setCollapsed(true)\n    }\n  }\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-sm fixed-top navbar-dark bg-dark flex-md-nowrap p-0 shadow\">\n\n        <a className=\"navbar-brand\" href={`${process.env.PUBLIC_URL}/`}>COVID-19 Dashboard</a>\n\n        <button onClick={() => { toggleNavbar() }} className={`${classTwo}`} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample04\" aria-controls=\"navbarsExample04\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className={`${classOne}`} id=\"navbarsExample04\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <NavLink path=\"/\" label=\"Global\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/today\" label=\"Today\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/top-cases\" label=\"Top&nbsp;cases\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/heatmaps\" label=\"Heatmaps\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/table\" label=\"Data&nbsp;table\"/>\n            </li>\n          </ul>\n        </div>\n\n        <InputSearch data={searchData}/>\n\n      </nav>\n    </>\n  )\n}\n\nexport default NavBar\n","import {\n  Link,\n} from 'react-router-dom'\n\nimport React from 'react'\nimport NavLink from './NavLink'\n\nconst NavSideBar = ({ casesByLocation }) => {\n\n  return (\n    <>\n    <nav className=\"col-md-2 d-none d-md-block sidebar\">\n      <div className=\"sidebar-sticky\">\n        <ul className=\"nav flex-column\">\n          <li className=\"nav-item\">\n            <NavLink path=\"/\" label=\"Global\" icon=\"home\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/today\" label=\"Today\" icon=\"chart\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/top-cases\" label=\"Top&nbsp;cases\" icon=\"chart\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/heatmaps\" label=\"Heatmaps\" icon=\"report\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/table\" label=\"Data&nbsp;table\" icon=\"report\"/>\n          </li>\n        </ul>\n\n        <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n          <span>Reports by country</span>\n        </h6>\n        <ul className=\"nav flex-column mb-2\">\n          {casesByLocation.sort((a, b) => {\n            const countryA = a.country.toUpperCase();\n            const countryB = b.country.toUpperCase();\n\n            let comparison = 0;\n            if (countryA > countryB) {\n              comparison = 1;\n            } else if (countryA < countryB) {\n              comparison = -1;\n            }\n            return comparison;\n          }).map(allCases => {\n            let linkToRender = \"\"\n            if (allCases.province === null) {\n              linkToRender = (<li key={allCases.idKey} className=\"nav-item\">\n              <Link className=\"nav-link\" to={allCases.idKey}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-file-text\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10 9 9 9 8 9\"></polyline></svg>\n                {allCases.country}\n              </Link>\n            </li>)\n            }\n            return linkToRender\n          })}\n        </ul>\n      </div>\n    </nav>\n    </>\n  )\n}\n\nexport default NavSideBar\n","import React from 'react'\nimport {\n  Link,\n  useHistory,\n} from 'react-router-dom'\nimport * as timeago from 'timeago.js'\n\nconst setParams = (params) => {\n  const searchParams = new URLSearchParams()\n  searchParams.set(\"sort\", params.sortKey)\n  searchParams.set(\"order\", params.order)\n  return searchParams.toString()\n}\n\nconst DataTable = ({ sortConfig, tableData }) => {\n  let history = useHistory()\n\n  const sortedItems = () => {\n    let sortableItems = [...tableData]\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.sortKey] < b[sortConfig.sortKey]) {\n          return sortConfig.order === 'asc' ? -1 : 1\n        }\n        if (a[sortConfig.sortKey] > b[sortConfig.sortKey]) {\n          return sortConfig.order === 'asc' ? 1 : -1\n        }\n        return 0\n      })\n    }\n    return sortableItems\n  }\n\n  const requestSort = (sortKey) => {\n    let order = 'asc'\n    if (\n      sortConfig &&\n      sortConfig.sortKey === sortKey &&\n      sortConfig.order === 'asc'\n    ) {\n      order = 'desc'\n    }\n    history.push(`?${setParams({ sortKey, order })}`)\n  }\n\n  const showLabel = (headerSortKey) => {\n    let indicator = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      indicator = sortConfig.order === 'asc' ? '(↑)' : '(↓)'\n    }\n    return indicator\n  }\n\n  const applySelectedColumnStyle = (headerSortKey) => {\n    let style = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      style = 'selectedForSortColumn'\n    }\n    return style\n  }\n\n  const applySelectedColumnHeaderStyle = (headerSortKey) => {\n    let style = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      style = 'sortableTableHeader sorted'\n    } else {\n      style = 'sortableTableHeader'\n    }\n    return style\n  }\n\n  let sortedTableData = sortedItems(tableData)\n\n  return (\n    <>\n      <div className=\"col-sm table-responsive\">\n        <table className=\"table table-sm table-hover sortable-data-table\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('country')} onClick={() => requestSort('country')}>Country {showLabel('country')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('confirmed')} onClick={() => requestSort('confirmed')}>Confirmed cases {showLabel('confirmed')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('confirmedCasesToday')} onClick={() => requestSort('confirmedCasesToday')}>Confrimed today {showLabel('confirmedCasesToday')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('active')} onClick={() => requestSort('active')}>Active {showLabel('active')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('recovered')} onClick={() => requestSort('recovered')}>Recovered {showLabel('recovered')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('deaths')} onClick={() => requestSort('deaths')}>Deaths {showLabel('deaths')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('deathsToday')} onClick={() => requestSort('deathsToday')}>Deaths today {showLabel('deathsToday')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('lastUpdate')} onClick={() => requestSort('lastUpdate')}>Last updated {showLabel('lastUpdate')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedTableData.map((tableRow) => {\n              return (\n                <tr key={tableRow.idKey}>\n                  <td className={applySelectedColumnStyle('country')}><Link to={tableRow.idKey}>{tableRow.country}</Link></td>\n                  <td className={applySelectedColumnStyle('confirmed')}>{tableRow.confirmed.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('confirmedCasesToday')}>{tableRow.confirmedCasesToday.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('active')}>{tableRow.active.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('recovered')}>{tableRow.recovered.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('deaths')}>{tableRow.deaths.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('deathsToday')}>{tableRow.deathsToday.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('lastUpdate')}>{timeago.format(new Date(parseInt(tableRow.lastUpdate)))}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  )\n}\n\nexport default DataTable\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport {\n  useLocation,\n} from 'react-router-dom'\nimport DataUpdatedTimeStamp from '../../Nav/DataUpdatedTimeStamp'\nimport DataTable from './DataTable'\n\nconst getTopCases = () => gql`\n  query {\n    casesByLocationWithNoProvince {\n      idKey\n      country\n      confirmed\n      confirmedCasesToday\n      active\n      recovered\n      deaths\n      deathsToday\n      lastUpdate\n    }\n  }\n`\n\nlet sortParams = { sortKey: 'country', order: 'asc' }\n\nconst useUrlQuery = (loc) => {\n  let urlParams = new URLSearchParams(loc.search);\n  return urlParams\n}\n\nconst DataTableInnerPage = ({ title, lastUpdated }) => {\n  let location = useLocation()\n  let query = useUrlQuery(location)\n\n  const sortQueryParam = query.get('sort')\n  const orderQueryParam = query.get('order')\n\n  if (sortQueryParam && orderQueryParam) {\n    sortParams = { sortKey: sortQueryParam, order: orderQueryParam }\n  }\n\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <DataTable sortConfig={sortParams} tableData={data.casesByLocationWithNoProvince}/>\n      </div>\n    </>\n  )\n}\n\nexport default DataTableInnerPage\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport './App.css'\nimport GlobalInnerPage from './components/InnerPages/GlobalInnerPage'\nimport CountryInnerPage from './components/InnerPages/CountryInnerPage'\nimport TopCasesInnerPage from './components/InnerPages/TopCasesInnerPage'\nimport TodayInnerPage from './components/InnerPages/TodayInnerPage'\nimport CountryNotFound from './components/InnerPages/CountryNotFound'\nimport Footer from './components/Nav/Footer';\nimport HeatMapsInnerPage from './components/InnerPages/HeatMapsInnerPage';\nimport NavBar from './components/Nav/NavBar';\nimport NavSideBar from './components/Nav/NavSideBar';\nimport DataTableInnerPage from './components/InnerPages/DataTableInnerPage/DataTableInnerPage'\n\nconst COVID_TOTALS = gql`\n  query {\n    lastUpdated\n    casesByLocation {\n      idKey\n      country\n      province\n    }\n  }\n`\n\nconst App = () => {\n  const { loading, error, data } = useQuery(COVID_TOTALS)\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const lastUpdated = data.lastUpdated\n  const casesByLocation = data.casesByLocation\n\n  return (\n    <>\n    <Router basename={process.env.PUBLIC_URL}>\n\n      <NavBar searchData={casesByLocation}/>\n\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n\n        <NavSideBar casesByLocation={casesByLocation}/>\n\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n            <div className=\"container-xl\">\n              <Switch>\n                <Route exact path=\"/\">\n                <GlobalInnerPage\n                    title=\"Global\"\n                    lastUpdated={lastUpdated}\n                  />\n                </Route>\n                <Route path=\"/top-cases\" children={\n                  <TopCasesInnerPage\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/today\" children={\n                  <TodayInnerPage\n                    title=\"Today's cases\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/heatmaps\" children={\n                  <HeatMapsInnerPage\n                    title=\"Heatmaps\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/table\" children={\n                  <DataTableInnerPage\n                    title=\"Data Table\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/:id\" children={\n                  <CountryInnerPage\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"*\">\n                  <CountryNotFound />\n                </Route>\n              </Switch>\n            </div>\n          </main>\n        </div>\n      </div>\n      <Footer/>\n    </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst uriHost = process.env.REACT_APP_GQL_URI || 'http://localhost:4000'\n\nconst client = new ApolloClient({\n  uri: `${uriHost}/graphql`,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}