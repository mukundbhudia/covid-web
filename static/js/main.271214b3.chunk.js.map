{"version":3,"sources":["components/Charts/TimeSeries.jsx","components/Nav/DataUpdatedTimeStamp.jsx","components/Panels/PanelDeathsToday.jsx","components/Panels/PanelConfirmedToday.jsx","components/Panels/PanelConfirmedCount.jsx","components/Panels/PanelActiveCount.jsx","components/Panels/PanelRecoveredCount.jsx","components/Panels/PanelDeathCount.jsx","components/Charts/ProgressBar.jsx","components/Panels/PanelConfirmedVsActive.jsx","components/Panels/PanelRecoveriesVsDeaths.jsx","components/WorldHeatMap/WorldHeatMap.jsx","components/WorldHeatMap/HeatMapRangeSlider.jsx","components/Charts/TopXBarGraph.jsx","components/Panels/PanelTopX.jsx","components/InnerPages/GlobalInnerPage.jsx","components/InnerPages/CountryNotFound.jsx","components/Charts/ProvincesBarGraph.jsx","components/Nav/ProvincesMenu.jsx","components/InnerPages/CountryInnerPage.jsx","components/InnerPages/TopCasesInnerPage.jsx","components/InnerPages/TodayInnerPage.jsx","components/Nav/Footer.jsx","components/InnerPages/HeatMapsInnerPage.jsx","components/Nav/NavLink.jsx","components/Nav/InputSearch/InputSearch.jsx","components/Nav/NavBar.jsx","components/Nav/NavSideBar.jsx","components/InnerPages/DataTableInnerPage/DataTable.jsx","components/InnerPages/DataTableInnerPage/DataTableInnerPage.jsx","App.jsx","serviceWorker.ts","index.tsx"],"names":["TimeSeries","chartTitle","casesToHide","data","currentCases","chartRef","React","createRef","useState","dataType","setDataType","chartType","setChartType","allDates","confirmed","confirmedToday","deaths","deathsToday","chartColors","firstCaseAdded","forEach","element","i","cases","dateFromString","Date","day","previousCase","push","toLocaleDateString","x","y","confirmedCasesToday","today","chartConfig","type","labels","datasets","label","fill","backgroundColor","borderColor","hidden","options","responsive","maintainAspectRatio","title","display","text","tooltips","mode","intersect","callbacks","tooltipItem","datasetIndex","yLabel","toLocaleString","hover","scales","xAxes","scaleLabel","labelString","yAxes","ticks","beginAtZero","callback","value","useEffect","myChartRef","current","getContext","chart","Chart","destroy","className","ref","role","aria-label","data-toggle","name","onClick","UpdatedTimeStamp","lastUpdated","lastUpdatedDate","timeago","parseInt","id","PanelDeathsToday","caseCount","PanelConfirmedToday","PanelConfirmedCount","PanelActiveCount","PanelRecoveredCount","PanelDeathCount","red","orange","yellow","green","blue","purple","grey","ProgressBar","dataSet","percentageDataSet","map","item","total","reduce","count","dataItem","length","percentage","Math","ceil","key","style","width","color","aria-valuenow","aria-valuemin","aria-valuemax","data-placement","PanelConfirmedVsActive","PanelRecoveriesVsDeaths","WorldHeatMap","caseNumberToParse","casesByLocationWithNoProvince","lightColour","darkColour","caseType","showMoreThanOneDataItem","heatMapData","countryCode","mainCaseNumberToShow","isValidCase","active","recovered","dataset","onlyValues","obj","minValue","min","apply","maxValue","max","paletteScale","d3","scale","linear","domain","range","iso","fillColor","mapDataLabel","Datamap","document","getElementById","projection","fills","defaultFill","geographyConfig","highlightBorderWidth","highlightFillColor","geo","highlightBorderColor","popupTemplate","tooltipHtml","properties","prevProps","this","props","date","mapData","processMapData","updateChoropleth","generateNewMap","Component","getGlobalCasesGivenDate","gql","clamp","number","datesVisited","HeatMapRangeSlider","dates","timeSeriesLength","sliderValue","setSliderValue","content","currentDay","currentDayAsDate","useQuery","variables","loading","error","client","prefetchLastFewDays","sliderValueToPrefetch","rangeBefore","rangeAfter","dayToQuery","query","JSON","stringify","getGlobalCasesByDate","onMouseOver","onChange","changeEvent","newSliderValue","target","_","debounce","TopXBarGraph","chartLabel","chartLabelKey","labelColor","dataArray","country","countries","chartLabelColor","plugins","PanelTopX","includeToday","topXconfirmedByCountry","topXactiveByCountry","topXrecoveredByCountry","topXdeathsByCountry","topXconfirmedTodayByCountry","topXdeathsTodayByCountry","COVID_GLOBAL_PAGE","InnerPage","totalCases","globalTimeSeries","getAllDaysWithCases","topXdata","confirmedVsActiveProgressBar","recoveredVsDeathsProgressBar","DataUpdatedTimeStamp","useParams","ProvincesBarGraph","countryName","confirmedDataArray","confirmedTodayDataArray","activeDataArray","recoveredDataArray","deathsDataArray","deathsTodayDataArray","provinces","province","ProvincesMenu","idKey","getProvincesGivenCountryName","provinceList","replace","toLowerCase","concat","provinceKey","to","pData","getCountry","getCasesByIdKey","CountryNotFound","lastUpdate","hasProvince","casesByDate","getTopCases","topCaseOptions","topLimitState","TopCasesInnerPage","topLimit","setTopLimit","limit","topCaseLimit","isGreaterThanZero","array","filter","caseMaps","textClassName","caseTypeState","TodayInnerPage","setCaseType","Object","keys","caseKey","Footer","href","HeatMapsInnerPage","iconMap","home","report","NavLink","path","icon","match","useRouteMatch","exact","xmlns","height","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","dangerouslySetInnerHTML","__html","InputSearch","state","disabled","dropup","flip","highlightOnlyResult","minLength","open","undefined","selectHintOnEnter","history","useHistory","labelKey","option","selected","onBlur","console","log","placeholder","NavBar","searchData","collapsed","setCollapsed","classOne","classTwo","process","data-target","aria-controls","aria-expanded","NavSideBar","casesByLocation","sort","a","b","countryA","toUpperCase","countryB","comparison","allCases","linkToRender","d","points","x1","y1","x2","y2","DataTable","sortConfig","tableData","requestSort","sortKey","order","params","searchParams","URLSearchParams","set","toString","setParams","showLabel","headerSortKey","indicator","applySelectedColumnStyle","applySelectedColumnHeaderStyle","sortedTableData","sortableItems","sortedItems","scope","tableRow","sortParams","DataTableInnerPage","location","useLocation","search","sortQueryParam","get","orderQueryParam","COVID_TOTALS","App","basename","GlobalInnerPage","children","CountryInnerPage","Boolean","window","hostname","ApolloClient","uri","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.271214b3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Chart from 'chart.js'\n\nconst TimeSeries = ({ chartTitle, casesToHide, data, currentCases }) => {\n  const chartRef = React.createRef()\n  const [ dataType, setDataType] = useState('linear')\n  const [ chartType, setChartType] = useState('line')\n\n  const allDates = []\n  let confirmed = []\n  let confirmedToday = []\n  let deaths = []\n  let deathsToday = []\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }\n\n  let firstCaseAdded = false\n  data.forEach((element, i) => {\n    const cases = element\n    if (cases.confirmed > 0) {\n      const dateFromString = new Date(cases.day)\n      if (!firstCaseAdded && i > 0) {\n        const previousCase = data[i-1]        \n        const dateFromString = new Date(previousCase.day)\n        firstCaseAdded = true\n        allDates.push((dateFromString).toLocaleDateString())\n        confirmed.push({x: dateFromString, y: previousCase.confirmed})\n        deaths.push({x: dateFromString, y: previousCase.deaths})\n        confirmedToday.push({x: dateFromString, y: previousCase.confirmedCasesToday})\n        deathsToday.push({x: dateFromString, y: previousCase.deathsToday})\n      } else {\n        allDates.push((dateFromString).toLocaleDateString())\n        confirmed.push({x: dateFromString, y: cases.confirmed})\n        deaths.push({x: dateFromString, y: cases.deaths})\n        confirmedToday.push({x: dateFromString, y: cases.confirmedCasesToday})\n        deathsToday.push({x: dateFromString, y: cases.deathsToday})       \n      }\n    }\n  })\n\n  const today = new Date()\n  allDates.push((today).toLocaleDateString())\n  confirmed.push({x: today, y: currentCases.confirmed})\n  deaths.push({x: today, y: currentCases.deaths})\n  confirmedToday.push({x: today, y: currentCases.confirmedCasesToday})\n  deathsToday.push({x: today, y: currentCases.deathsToday})\n\n  const chartConfig = {\n    type: chartType,\n    data: {\n      labels: allDates,\n      datasets: [\n        {\n          type: chartType,\n          label: 'Cumulative confirmed cases',\n          fill: false,\n          backgroundColor: chartColors.red,\n          borderColor: chartColors.red,\n          data: confirmed,\n          hidden: casesToHide['confirmed'],\n        },\n        {\n          type : chartType,\n          label: 'Cumulative deaths',\n          fill: false,\n          backgroundColor: chartColors.grey,\n          borderColor: chartColors.grey,\n          data: deaths,\n          hidden: casesToHide['deaths'],\n        },\n        {\n          type : 'bar',\n          label: 'Daily confirmed cases',\n          fill: false,\n          backgroundColor: chartColors.purple,\n          borderColor: chartColors.purple,\n          data: confirmedToday,\n          hidden: casesToHide['confirmedToday'],\n        },\n        {\n          type : 'bar',\n          label: 'Daily deaths',\n          fill: false,\n          backgroundColor: chartColors.yellow,\n          borderColor: chartColors.yellow,\n          data: deathsToday,\n          hidden: casesToHide['deathsToday'],\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Date'\n          }\n        }],\n        yAxes: [{\n          display: true,\n          type: dataType,\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig)\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n  \n  return (\n    <>\n    <div className=\"chart timeSeries\">\n      <canvas\n        className=\"canvas\"\n        ref={chartRef}\n      ></canvas>\n    </div>\n\n    <div className=\"btn-toolbar justify-content-end\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n      <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n        <label className={`btn btn-sm btn-light ${dataType === 'linear' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"data-type\" onClick={() => {\n            setDataType('linear')\n          }} /> Linear\n        </label>\n        <label className={`btn btn-sm btn-light ${dataType === 'logarithmic' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"data-type\" onClick={() => {\n            setDataType('logarithmic')\n          }}/> Logarithmic\n        </label>\n      </div>\n      <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n        <label className={`btn btn-sm btn-light ${chartType === 'line' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"chart-type\" onClick={() => {setChartType('line')}}/> Line\n        </label>\n        <label className={`btn btn-sm btn-light ${chartType === 'bar' ? 'active' : ''}`}>\n          <input type=\"radio\" name=\"chart-type\" onClick={() => {setChartType('bar')}}/> Bar\n        </label>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default TimeSeries\n","import React from 'react'\nimport * as timeago from 'timeago.js'\n\nconst UpdatedTimeStamp = ({ lastUpdated }) => {\n  const lastUpdatedDate = timeago.format(new Date(parseInt(lastUpdated)))\n  return (\n    <div className=\"col-sm float-right\">\n      <p className=\"lastUpdatedTimeStamp float-right\">Data last updated: <span id=\"lastUpdated\">{lastUpdatedDate}</span></p>\n    </div>\n  )\n}\n\nexport default UpdatedTimeStamp\n","import React from 'react'\n\nconst PanelDeathsToday = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-warning\" role=\"alert\">\n        <h5>New deaths today</h5>\n        <div id=\"deathsTodayCounter\" className=\"total-cases text-yellow\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelDeathsToday\n","import React from 'react'\n\nconst PanelConfirmedToday = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-purple\" role=\"alert\">\n        <h5>New confirmed cases today</h5>\n        <div id=\"confirmedTodayCounter\" className=\"total-cases text-purple\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedToday\n","import React from 'react'\n\nconst PanelConfirmedCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-danger\" role=\"alert\">\n        <h5>Total confirmed</h5>\n        <div id=\"confirmedCounter\" className=\"total-cases text-danger\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedCount\n","import React from 'react'\n\nconst PanelActiveCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-primary\" role=\"alert\">\n        <h5>Total active</h5>\n        <div id=\"activeCounter\" className=\"total-cases text-primary\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div> \n    </>\n  )\n}\n\nexport default PanelActiveCount\n","import React from 'react'\n\nconst PanelRecoveredCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-success\" role=\"alert\">\n        <h5>Total recovered</h5>\n        <div id=\"recoveredCounter\" className=\"total-cases text-success\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelRecoveredCount\n","import React from 'react'\n\nconst PanelDeathCount = ({\n  caseCount,\n  }) => {\n\n  return (\n    <>\n      <div className=\"alert alert-dark\" role=\"alert\">\n        <h5>Total deaths</h5>\n        <div id=\"deathsCounter\" className=\"total-cases text-dark\">\n          { caseCount.toLocaleString() }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelDeathCount\n","import React from 'react'\n\nconst chartColors = {\n  red: 'rgb(255, 99, 132)',\n  orange: 'rgb(255, 159, 64)',\n  yellow: 'rgb(255, 205, 86)',\n  green: 'rgb(75, 192, 192)',\n  blue: 'rgb(54, 162, 235)',\n  purple: 'rgb(153, 102, 255)',\n  grey: '#b0b0b0'\n}\n\nconst ProgressBar = ({ dataSet }) => {\n\n  const percentageDataSet = dataSet.map((item, i) => {\n    const total = dataSet.reduce((count, dataItem) => {\n      return count + dataItem.data\n    }, 0)\n    if (total === 0) {\n      return 0\n    } else {\n      if (i+1 === dataSet.length) {\n        item.percentage = Math.ceil((item.data/(total))*100) - 1\n      } else {\n        item.percentage = Math.ceil((item.data/(total))*100)\n      }\n      return item\n    }\n  })\n\n  return (\n    <div className=\"progress\">\n      {percentageDataSet.map((dataItem, i) => {\n        if (dataItem.percentage > 0) {\n          return (\n            <div\n              key={i}\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              style={{width: `${dataItem.percentage}%`, backgroundColor: `${chartColors[dataItem.color]}`}}\n              aria-valuenow={dataItem.percentage}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              data-toggle=\"tooltip\" data-placement=\"top\" title={dataItem.label}\n            >\n              {dataItem.percentage}%\n            </div>\n          )\n        } else {\n          return null\n        }\n      })}\n    </div>\n  )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport ProgressBar from '../Charts/ProgressBar'\n\nconst PanelConfirmedVsActive = ({\n  data,\n  }) => {\n\n  return (\n    <>\n      <div className=\"card bg-light mb-3\">\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">Confirmed/Active</h6>\n          <ProgressBar\n              dataSet={data}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelConfirmedVsActive\n","import React from 'react'\nimport ProgressBar from '../Charts/ProgressBar'\n\nconst PanelRecoveriesVsDeaths = ({\n  data,\n  }) => {\n\n  return (\n    <>\n      <div className=\"card bg-light mb-3\">\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">Recoveries/Deaths</h6>\n            <ProgressBar\n              dataSet={data}\n            />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PanelRecoveriesVsDeaths\n","import React, { Component } from 'react'\nimport Datamap from 'datamaps/dist/datamaps.world.min.js'\nimport d3 from 'd3'\nimport './WorldHeatMap.css'\n\nclass WorldHeatMap extends Component {\n\n  isValidCase(caseNumberToParse) {\n    if (caseNumberToParse >= 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem) {\n    const heatMapData = []\n    casesByLocationWithNoProvince.forEach((item, i) => {\n      if (item.countryCode) {\n        let mainCaseNumberToShow = parseInt(item[caseType])\n        if (this.isValidCase(mainCaseNumberToShow)) {\n          if (!showMoreThanOneDataItem) {\n            return heatMapData.push([\n              item.countryCode,\n              mainCaseNumberToShow\n            ])\n          } else if (showMoreThanOneDataItem) {\n            return heatMapData.push([\n              item.countryCode, \n              mainCaseNumberToShow,\n              parseInt(item.confirmedCasesToday), \n              parseInt(item.active) || 'N/A',\n              parseInt(item.recovered) || 'N/A',\n              parseInt(item.deaths), \n              parseInt(item.deathsToday)\n            ])\n          }\n        }\n      }\n    })\n    \n    // Datamaps expect data in format:\n    // { \"USA\": { \"fillColor\": \"#42a844\", numberOfWhatever: 75},\n    //   \"FRA\": { \"fillColor\": \"#8dc386\", numberOfWhatever: 43 } }\n    let dataset = {}\n\n    // We need to colorize every country based on \"numberOfWhatever\"\n    // colors should be uniq for every value.\n    // For this purpose we create palette(using min/max this.props.data-value)\n    let onlyValues = heatMapData.map(function (obj) { return obj[1] })\n    let minValue = Math.min.apply(null, onlyValues),\n      maxValue = Math.max.apply(null, onlyValues)\n\n    // create color palette function\n    // color can be whatever you wish\n    let paletteScale = d3.scale.linear()\n      .domain([minValue, maxValue])\n      .range([lightColour, darkColour])\n\n    // fill dataset in appropriate format\n    heatMapData.forEach(function (item) { //\n      // item example value [\"USA\", 70]\n      let iso = item[0],\n      value = item[1]\n      if (showMoreThanOneDataItem) {\n        let confirmedCasesToday = item[2]\n        let active = item[3]\n        let recovered = item[4]\n        let deaths = item[5]\n        let deathsToday = item[6]\n        dataset[iso] = {\n          caseCount: value,\n          confirmedCasesToday,\n          active,\n          recovered,\n          deaths,\n          deathsToday,\n          fillColor: paletteScale(value),\n        }\n      } else {\n        dataset[iso] = { caseCount: value, fillColor: paletteScale(value) }\n      }\n    })\n\n    return dataset\n  }\n\n  generateNewMap(dataset ,mapDataLabel, showMoreThanOneDataItem) {\n    const datamap = new Datamap({\n      element: document.getElementById(`choroplethMap-${mapDataLabel}`),\n      projection: 'mercator', // big world map\n      // countries don't listed in dataset will be painted with this color\n      fills: { defaultFill: '#F5F5F5' },\n      data: dataset,\n      geographyConfig: {\n        borderColor: '#DEDEDE',\n        highlightBorderWidth: 2,\n        // don't change color on mouse hover\n        highlightFillColor: function(geo) {\n          return geo['fillColor'] || '#F5F5F5'\n        },\n        // only change border\n        highlightBorderColor: '#B7B7B7',\n        // show desired information in tooltip\n        popupTemplate: function(geo, data) {\n          // don't show tooltip if country don't present in dataset\n          let tooltipHtml = `\n          <div class=\"hoverinfo\">\n            <strong>${geo.properties.name}</strong>\n            <br>${mapDataLabel}: <span>N/A</span>\n          </div>`\n          if (data && !showMoreThanOneDataItem) {\n            tooltipHtml = `\n            <div class=\"hoverinfo\">\n              <strong>${geo.properties.name}</strong>\n              <br>${mapDataLabel}: <strong>${data.caseCount.toLocaleString()}</strong>\n            </div>`\n          } else if (data && showMoreThanOneDataItem) {\n            tooltipHtml = `\n            <div class=\"hoverinfo\">\n              <strong>${geo.properties.name}</strong>\n              <br>${mapDataLabel}: <strong>${data.caseCount.toLocaleString()}</strong>\n              <br>Confirmed today: <span>${data.confirmedCasesToday.toLocaleString()}</span>\n              <br>Active: <span>${data.active.toLocaleString()}</span>\n              <br>Recovered: <span>${data.recovered.toLocaleString()}</span>\n              <br>Deaths: <span>${data.deaths.toLocaleString()}</span>\n              <br>Deaths today: <span>${data.deathsToday.toLocaleString()}</span>\n            </div>`\n          }\n          return tooltipHtml\n        }\n      }\n    })\n    return datamap\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      const casesByLocationWithNoProvince = this.props.data\n      const lightColour = this.props.lightColour\n      const darkColour = this.props.darkColour\n      const caseType = this.props.caseType\n      const showMoreThanOneDataItem = this.props.showMoreThanOneDataItem || false\n      const mapData = this.processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem)\n      this.map.updateChoropleth(mapData)\n    }\n  }\n\n  componentDidMount() {\n    const casesByLocationWithNoProvince = this.props.data\n    const mapDataLabel = this.props.mapDataLabel\n    const lightColour = this.props.lightColour\n    const darkColour = this.props.darkColour\n    const caseType = this.props.caseType\n    const showMoreThanOneDataItem = this.props.showMoreThanOneDataItem || false\n    const mapData = this.processMapData(casesByLocationWithNoProvince, lightColour, darkColour, caseType, showMoreThanOneDataItem)\n    this.map = this.generateNewMap(mapData, mapDataLabel, showMoreThanOneDataItem)\n  }\n\n  render() {\n    const mapDataLabel = this.props.mapDataLabel\n    return (\n      <>\n        <div id={`choroplethMap-${mapDataLabel}`} className=\"choroplethMap\"></div>\n      </>\n    )\n  }\n}\nexport default WorldHeatMap\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport _ from 'lodash'\n\nimport WorldHeatMap from './WorldHeatMap'\n\nconst getGlobalCasesGivenDate = gql`\nquery Test($day: String!) {\n  getGlobalCasesByDate(day: $day) {\n    countryCode\n    confirmed\n    active\n    recovered\n    deaths\n    confirmedCasesToday\n    deathsToday\n  }\n}\n`\n\nconst clamp = (number, min, max) => {\n  return Math.min(Math.max(number, min), max)\n}\n\nlet datesVisited = []\n\nconst HeatMapRangeSlider = ({ dates }) => {\n  const timeSeriesLength = dates.length\n  const [ sliderValue, setSliderValue ] = useState(timeSeriesLength)\n\n  datesVisited[sliderValue] = true\n\n  let currentDay = dates[sliderValue-1]\n  let currentDayAsDate = new Date(currentDay)\n  const { loading, error, data, client } = useQuery(getGlobalCasesGivenDate, {\n    variables: { day: currentDay },\n  })\n\n  const prefetchLastFewDays = (sliderValueToPrefetch) => {\n    sliderValueToPrefetch = parseInt(sliderValueToPrefetch)\n    const MAX_TO_PREFETCH = 5\n\n    let rangeBefore = clamp(sliderValueToPrefetch - MAX_TO_PREFETCH, 0, timeSeriesLength)\n    let rangeAfter = clamp(sliderValueToPrefetch + MAX_TO_PREFETCH, 0, timeSeriesLength)\n\n    for (let i = rangeBefore; i < rangeAfter; i++) {\n      const dateVisited = datesVisited[i]\n      if (!dateVisited) {\n        let dayToQuery = dates[i]\n        client.query({\n          query: getGlobalCasesGivenDate,\n          variables: { day: dayToQuery }\n        })\n        datesVisited[i] = true\n      }\n    }\n  }\n\n  const moveSlider = (newSliderValue) => {\n    setSliderValue(newSliderValue)\n    // prefetchLastFewDays(newSliderValue)\n    _.debounce(() => { prefetchLastFewDays(newSliderValue) }, 200)\n  }\n\n  let content\n  if (loading) {\n    content = (\n      <WorldHeatMap mapDataLabel=\"Confirmed\" showMoreThanOneDataItem={true} caseType=\"confirmed\" data={[]} date={\"\"} lightColour=\"#ffeaef\" darkColour=\"#ff6384\"/>\n    )\n  } else if (error) {\n    content = (<p>{JSON.stringify(error, null, 2)}</p>)\n  } else {\n    const getGlobalCasesByDate = data.getGlobalCasesByDate\n    content = (\n      <WorldHeatMap mapDataLabel=\"Confirmed\" showMoreThanOneDataItem={true} caseType=\"confirmed\" data={getGlobalCasesByDate} date={currentDay} lightColour=\"#ffeaef\" darkColour=\"#ff6384\"/>\n    )\n  }\n\n  return (\n    <>\n    <div className=\"card bg-light mb-3\">\n      <div className=\"card-body pt-0\">\n        {content}\n        <div className=\"heatmapSliderHeader d-flex justify-content-end\">\n          <span>Confirmed cases on <strong>{currentDayAsDate.toLocaleDateString()}</strong></span>\n        </div>\n        <div className=\"heatmapSliderControls\">\n          <input type=\"range\" className=\"custom-range\" min=\"1\" max={timeSeriesLength} id=\"heatMapDateSlider\" value={sliderValue}\n            onMouseOver={() => {prefetchLastFewDays(sliderValue)}}\n            onChange={changeEvent => { moveSlider(changeEvent.target.value) }}>\n          </input>\n        </div>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default HeatMapRangeSlider\n","import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\nconst TopXBarGraph = ({ data, id, chartTitle, chartLabel, chartLabelKey, labelColor }) => {\n  const chartRef = React.createRef()\n\n  const dataArray = data.map(element => ({ x: element.country, y: element[chartLabelKey] }))\n  const countries = data.map(element => element.country)\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }\n\n  const chartLabelColor = chartColors[labelColor]\n  \n  const chartConfig = {\n    type: 'bar',\n    data: {\n      labels: countries,\n      datasets: [\n        {\n          label: chartLabel,\n          backgroundColor: chartLabelColor,\n          borderColor: chartLabelColor,\n          data: dataArray,\n          fill: false,\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        labels: false\n      },\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Country'\n          }\n        }],\n        yAxes: [{\n          display: true,\n          type: 'linear',\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig)\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n\n  return (\n    <div className=\"col-sm\">\n      <div className=\"chart barGraph topx\" id={id}>\n        <canvas\n          id={`canvas`}\n          ref={chartRef}\n        ></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default TopXBarGraph\n","import React from 'react'\nimport TopXBarGraph from '../Charts/TopXBarGraph'\n\nconst PanelTopX = ({ data, includeToday }) => {\n\n  return (\n    <>\n      <div className=\"row\">\n        <TopXBarGraph\n          data={data.topXconfirmedByCountry.data}\n          id=\"top5confirmed\"\n          chartTitle={data.topXconfirmedByCountry.label}\n          chartLabel=\"Confirmed\"\n          chartLabelKey=\"confirmed\"\n          labelColor=\"red\"\n        />\n        <TopXBarGraph\n          data={data.topXactiveByCountry.data}\n          id=\"top5active\"\n          chartTitle={data.topXactiveByCountry.label}\n          chartLabel=\"Active\"\n          chartLabelKey=\"active\"\n          labelColor=\"blue\"\n        />\n      </div>\n      <div className=\"row\">\n        <TopXBarGraph\n          data={data.topXrecoveredByCountry.data}\n          id=\"top5recovered\"\n          chartTitle={data.topXrecoveredByCountry.label}\n          chartLabel=\"Recovered\"\n          chartLabelKey=\"recovered\"\n          labelColor=\"green\"\n        />\n        <TopXBarGraph\n          data={data.topXdeathsByCountry.data}\n          id=\"top5deaths\"\n          chartTitle={data.topXdeathsByCountry.label}\n          chartLabel=\"Deaths\"\n          chartLabelKey=\"deaths\"\n          labelColor=\"grey\"\n        />\n      </div>\n      {includeToday &&\n        <div className=\"row\">\n          <TopXBarGraph\n            data={data.topXconfirmedTodayByCountry.data}\n            id=\"top5recovered\"\n            chartTitle={data.topXconfirmedTodayByCountry.label}\n            chartLabel=\"Confirmed cases today\"\n            chartLabelKey=\"confirmedCasesToday\"\n            labelColor=\"purple\"\n          />\n          <TopXBarGraph\n            data={data.topXdeathsTodayByCountry.data}\n            id=\"top5deaths\"\n            chartTitle={data.topXdeathsTodayByCountry.label}\n            chartLabel=\"Deaths today\"\n            chartLabelKey=\"deathsToday\"\n            labelColor=\"yellow\"\n          />\n        </div>\n      }\n    </>\n  )\n}\n\nexport default PanelTopX\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport TimeSeries from '../Charts/TimeSeries'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelDeathsToday from '../Panels/PanelDeathsToday'\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday'\nimport PanelConfirmedCount from '../Panels/PanelConfirmedCount'\nimport PanelActiveCount from '../Panels/PanelActiveCount'\nimport PanelRecoveredCount from '../Panels/PanelRecoveredCount'\nimport PanelDeathCount from '../Panels/PanelDeathCount'\nimport PanelConfirmedVsActive from '../Panels/PanelConfirmedVsActive'\nimport PanelRecoveriesVsDeaths from '../Panels/PanelRecoveriesVsDeaths'\nimport HeatMapRangeSlider from '../WorldHeatMap/HeatMapRangeSlider'\nimport PanelTopX from '../Panels/PanelTopX'\n\nconst COVID_GLOBAL_PAGE = gql`\n  query {\n    totalCases {\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n    }\n    globalTimeSeries {\n      confirmed\n      deaths\n      confirmedCasesToday\n      deathsToday\n      day\n    }\n    getAllDaysWithCases\n    topXconfirmedByCountry(limit: 5) {\n      country\n      confirmed\n    }\n    topXactiveByCountry(limit: 5) {\n      country\n      active\n    }\n    topXrecoveredByCountry(limit: 5) {\n      country\n      recovered\n    }\n    topXdeathsByCountry(limit: 5) {\n      country\n      deaths\n    }\n  }\n`\n\nconst InnerPage = ({\n   title,\n   lastUpdated,\n  }) => {\n  const { loading, error, data } = useQuery(COVID_GLOBAL_PAGE)\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const totalCases = data.totalCases\n  const globalTimeSeries = data.globalTimeSeries\n  const getAllDaysWithCases = data.getAllDaysWithCases\n  const topXdata = {\n    topXconfirmedByCountry: {data: data.topXconfirmedByCountry, label: 'Top 5 confirmed by country'},\n    topXactiveByCountry: {data: data.topXactiveByCountry, label: 'Top 5 active by country'},\n    topXrecoveredByCountry: {data: data.topXrecoveredByCountry, label: 'Top 5 recovered by country'},\n    topXdeathsByCountry: {data: data.topXdeathsByCountry, label: 'Top 5 deaths by country'},\n  }\n\n  const confirmedVsActiveProgressBar = [\n    {\n      data: totalCases.confirmed,\n      label: 'confirmed',\n      color: 'red',\n    },\n    {\n      data: totalCases.confirmed - totalCases.active,\n      label: 'active',\n      color: 'blue',\n    },\n  ]\n\n  const recoveredVsDeathsProgressBar = [\n    {\n      data: totalCases.recovered,\n      label: 'recovered',\n      color: 'green',\n    },\n    {\n      data: totalCases.deaths,\n      label: 'deaths',\n      color: 'grey',\n    },\n  ]\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedCount caseCount={totalCases.confirmed}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelActiveCount caseCount={totalCases.active}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveredCount caseCount={totalCases.recovered}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathCount caseCount={totalCases.deaths}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={totalCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={totalCases.deathsToday} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedVsActive data={confirmedVsActiveProgressBar}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveriesVsDeaths data={recoveredVsDeathsProgressBar}/>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <HeatMapRangeSlider dates={getAllDaysWithCases}/>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <TimeSeries\n            chartTitle=\"Time series cases by day\"\n            casesToHide={ {confirmed: false, deaths: false, confirmedToday: false, deathsToday: false} }\n            data={globalTimeSeries}\n            currentCases={totalCases}\n          />\n        </div>\n      </div>\n\n      <PanelTopX data={topXdata}/>\n    </>\n  )\n}\n\nexport default InnerPage\n","import React from 'react'\nimport {\n  useParams\n} from \"react-router-dom\";\n\nconst InnerPage = (data) => {\n  let { id } = useParams()\n\n  return (\n    <>\n      <div id={id} className=\"\">\n        <h3>Page cannot not found</h3>\n      </div>\n      <br></br>\n      <div className=\"container-xl\">\n        <p>The page at \"<strong>/{id}</strong>\" cannot be found.</p>\n      </div>\n    </>\n  )\n}\n\nexport default InnerPage\n","import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\nconst ProvincesBarGraph = ({ countryName, data, id, }) => {\n  const chartRef = React.createRef()\n\n  const confirmedDataArray = []\n  const confirmedTodayDataArray = []\n  const activeDataArray = []\n  const recoveredDataArray = []\n  const deathsDataArray = []\n  const deathsTodayDataArray = []\n  const provinces = []\n\n  data.forEach(element => {\n    if (element.province !== 'mainland' && element.province !== countryName) {\n      confirmedDataArray.push({ x: element.province, y: element.confirmed })\n      confirmedTodayDataArray.push({ x: element.province, y: element.confirmedCasesToday })\n      activeDataArray.push({ x: element.province, y: element.active })\n      recoveredDataArray.push({ x: element.province, y: element.recovered })\n      deathsDataArray.push({ x: element.province, y: element.deaths })\n      deathsTodayDataArray.push({ x: element.province, y: element.deathsToday })\n      provinces.push(element.province)\n    }\n  })\n\n  const chartColors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }\n  \n  const chartConfig = {\n    type: 'bar',\n    data: {\n      labels: provinces,\n      datasets: [\n        {\n          label: 'Confirmed',\n          backgroundColor: chartColors.red,\n          borderColor: chartColors.red,\n          data: confirmedDataArray,\n          fill: false,\n          hidden: false,\n        },\n        {\n          label: 'Active',\n          backgroundColor: chartColors.blue,\n          borderColor: chartColors.blue,\n          data: activeDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Recovered',\n          backgroundColor: chartColors.green,\n          borderColor: chartColors.green,\n          data: recoveredDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Deaths',\n          backgroundColor: chartColors.grey,\n          borderColor: chartColors.grey,\n          data: deathsDataArray,\n          fill: false,\n          hidden: false,\n        },\n        {\n          label: 'Confirmed today',\n          backgroundColor: chartColors.purple,\n          borderColor: chartColors.purple,\n          data: confirmedTodayDataArray,\n          fill: false,\n          hidden: true,\n        },\n        {\n          label: 'Deaths today',\n          backgroundColor: chartColors.yellow,\n          borderColor: chartColors.yellow,\n          data: deathsTodayDataArray,\n          fill: false,\n          hidden: true,\n        },\n      ]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        labels: false\n      },\n      title: {\n        display: true,\n        text: `Cases by each province/state of ${countryName}`\n      },\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: (tooltipItem, data) => {\n            let label = data.datasets[tooltipItem.datasetIndex].label || ''\n            if (label) {\n                label += ': '\n            }\n            label += tooltipItem.yLabel.toLocaleString()\n            return label\n          },\n        },\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Province/state'\n          }\n        }],\n        yAxes: [{\n          display: true,\n          type: 'linear',\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases'\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: value => value.toLocaleString()\n          }\n        }]\n      }\n    }\n  }\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\")\n    const chart = new Chart(myChartRef, chartConfig);\n    return () => chart.destroy()\n  }, [chartRef, chartConfig])\n\n  return (\n    <div className=\"col-sm\">\n      <div className=\"chart provinces barGraph\" id={id}>\n        <canvas\n          id={`canvas`}\n          ref={chartRef}\n        ></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default ProvincesBarGraph\n","import React from 'react'\nimport {\n  Link,\n} from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport ProvincesBarGraph from '../Charts/ProvincesBarGraph'\n\nconst getProvincesGivenCountryName = (countryName) => gql`\n  query {\n    getProvincesGivenCountryName(country: \"${countryName}\") {\n      province\n      idKey\n      active\n      confirmed\n      deaths\n      confirmedCasesToday\n      deathsToday\n      recovered\n    }\n  }\n`\n\nconst ProvincesMenu = ({ countryName, idKey }) => {\n  const { loading, error, data } = useQuery(getProvincesGivenCountryName(countryName))\n  if (loading) return <p>Loading provinces data ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  let provinceList = []\n  if (data) {\n    let countryAsProvince = [{ idKey: countryName.replace(/,/g, '').replace(/\\s+/g, '-').toLowerCase(), province: countryName}]\n    provinceList = countryAsProvince.concat(data.getProvincesGivenCountryName)\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm provinceNav\">\n          {provinceList.length > 0 &&\n            <ul className=\"nav\">\n              {provinceList.map((provinceKey, i) => {\n                let className = \"nav-item provinceNavLink\"\n                if (provinceKey.idKey === idKey) {\n                  className = \"nav-item provinceNavLink active disabled\"\n                }\n                return (<li className={className} key={i}>\n                <Link className=\"nav-link\" to={provinceKey.idKey}>{`${provinceKey.province}`}</Link>\n              </li>)\n              })}\n            </ul>\n          }\n        </div>\n      </div>\n      <div className=\"row\">\n        <ProvincesBarGraph countryName={countryName} data={provinceList} id=\"provinceBarChart\"/>\n      </div>\n    </>\n  )\n}\n\nexport default ProvincesMenu\n","import React from 'react'\nimport {\n  useParams\n} from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport CountryNotFound from './CountryNotFound'\nimport TimeSeries from '../Charts/TimeSeries'\n// import TopXBarGraph from './TopXBarGraph'\n// import PieChart from '../components/PieChart'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp';\nimport ProvincesMenu from '../Nav/ProvincesMenu';\nimport PanelConfirmedCount from '../Panels/PanelConfirmedCount';\nimport PanelActiveCount from '../Panels/PanelActiveCount';\nimport PanelRecoveredCount from '../Panels/PanelRecoveredCount';\nimport PanelDeathCount from '../Panels/PanelDeathCount';\nimport PanelDeathsToday from '../Panels/PanelDeathsToday';\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday';\nimport PanelConfirmedVsActive from '../Panels/PanelConfirmedVsActive';\nimport PanelRecoveriesVsDeaths from '../Panels/PanelRecoveriesVsDeaths';\n\nconst getCountry = (idKey) => gql`\n  query {\n    getCasesByIdKey(idKey: \"${idKey}\"){\n      country\n      province\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n      latitude\n      longitude\n      lastUpdate\n      casesByDate {\n        confirmed\n        deaths\n        confirmedCasesToday\n        deathsToday\n        day\n      }\n      provincesList {\n        idKey\n        province\n      }\n      hasProvince\n    }\n  }\n`\n\nconst InnerPage = (pData) => {\n  let { id } = useParams()\n  const { loading, error, data } = useQuery(getCountry(id))\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  let getCasesByIdKey = data && data.getCasesByIdKey[0]\n\n  if (!getCasesByIdKey) {\n    return ( <CountryNotFound /> )\n  }\n  let lastUpdated = getCasesByIdKey.lastUpdate\n  let idKey = id\n\n  const genPageTitle = (country, province) => {\n    if (province) {\n      return `${country} - ${province}`\n    } else {\n      return `${country}`\n    }\n  }\n\n  const confirmedVsActiveProgressBar = [\n    {\n      data: getCasesByIdKey.confirmed,\n      label: 'confirmed',\n      color: 'red',\n    },\n    {\n      data: getCasesByIdKey.confirmed - getCasesByIdKey.active,\n      label: 'active',\n      color: 'blue',\n    },\n  ]\n\n  const recoveredVsDeathsProgressBar = [\n    {\n      data: getCasesByIdKey.recovered,\n      label: 'recovered',\n      color: 'green',\n    },\n    {\n      data: getCasesByIdKey.deaths,\n      label: 'deaths',\n      color: 'grey',\n    },\n  ]\n\n  const currentCases = {\n    confirmed: getCasesByIdKey.confirmed,\n    active: getCasesByIdKey.active,\n    recovered: getCasesByIdKey.recovered,\n    deaths: getCasesByIdKey.deaths,\n    confirmedCasesToday: getCasesByIdKey.confirmedCasesToday,\n    deathsToday: getCasesByIdKey.deathsToday,\n  }\n\n  return (\n    <>\n      <div id={idKey} className=\"\">\n        <h3>{genPageTitle(getCasesByIdKey.country, getCasesByIdKey.province)}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedCount caseCount={currentCases.confirmed}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelActiveCount caseCount={currentCases.active}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveredCount caseCount={currentCases.recovered}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathCount caseCount={currentCases.deaths}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={currentCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={currentCases.deathsToday}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedVsActive data={confirmedVsActiveProgressBar}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelRecoveriesVsDeaths data={recoveredVsDeathsProgressBar}/>\n        </div>\n      </div>\n\n      {\n        (getCasesByIdKey.province || getCasesByIdKey.hasProvince) &&\n        <ProvincesMenu countryName={getCasesByIdKey.country} idKey={idKey}/>\n      }\n\n      {getCasesByIdKey.casesByDate &&\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <TimeSeries\n              chartTitle=\"Time series cases by day\"\n              casesToHide={ {confirmed: false, deaths: false, confirmedToday: false, deathsToday: false} }\n              data={getCasesByIdKey.casesByDate}\n              currentCases={currentCases}\n            />\n          </div>\n        </div>\n      }\n      <br/>\n      {getCasesByIdKey.casesByDate &&\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <TimeSeries\n              chartTitle=\"Time series cases by day\"\n              casesToHide={ {confirmed: true, deaths: true, confirmedToday: false, deathsToday: false} }\n              data={getCasesByIdKey.casesByDate}\n              currentCases={currentCases}\n            />\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n\nexport default InnerPage\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelTopX from '../Panels/PanelTopX'\n\nconst getTopCases = gql`\nquery TopCases($limit: Int!) {\n    topXconfirmedByCountry(limit: $limit) {\n      country\n      confirmed\n    }\n    topXactiveByCountry(limit: $limit) {\n      country\n      active\n    }\n    topXrecoveredByCountry(limit: $limit) {\n      country\n      recovered\n    }\n    topXdeathsByCountry(limit: $limit) {\n      country\n      deaths\n    }\n    topXconfirmedTodayByCountry(limit: $limit) {\n      country\n      confirmedCasesToday\n    }\n    topXdeathsTodayByCountry(limit: $limit) {\n      country\n      deathsToday\n    }\n  }\n`\n\nconst topCaseOptions = [ 5, 10, 15, 20 ]\nlet topLimitState = topCaseOptions[1]\n\nconst TopCasesInnerPage = ({ lastUpdated, }) => {\n  const [ topLimit, setTopLimit] = useState(topLimitState)\n  topLimitState = topLimit\n  const { loading, error, data, client } = useQuery(getTopCases, {\n    variables: { limit: topLimit },\n  })\n\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const prefetchTopCases = () => {\n    topCaseOptions.forEach(topCaseLimit => {\n      client.query({\n        query: getTopCases,\n        variables: { limit: topCaseLimit },\n      })\n    })\n  }\n\n  const topXdata = {\n    topXconfirmedByCountry: {data: data.topXconfirmedByCountry, label: `Top ${topLimit} confirmed by country`},\n    topXactiveByCountry: {data: data.topXactiveByCountry, label: `Top ${topLimit} active by country`},\n    topXrecoveredByCountry: {data: data.topXrecoveredByCountry, label: `Top ${topLimit} recovered by country`},\n    topXdeathsByCountry: {data: data.topXdeathsByCountry, label: `Top ${topLimit} deaths by country`},\n    topXconfirmedTodayByCountry: {data: data.topXconfirmedTodayByCountry, label: `Top ${topLimit} confirmed cases today by country`},\n    topXdeathsTodayByCountry: {data: data.topXdeathsTodayByCountry, label: `Top ${topLimit} deaths today by country`},\n  }\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>Top {topLimit} cases globally</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\" onMouseOver={() => {prefetchTopCases()}}>\n              {topCaseOptions.map((item) => {\n                return  (\n                <label key={item} className={`btn btn-sm btn-light ${topLimit === item ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setTopLimit(item)}}/> Top {item}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"top-tab-container\">\n        <PanelTopX data={topXdata} includeToday={true} />\n      </div>\n    </>\n  )\n}\n\nexport default TopCasesInnerPage\n","import React, { useState } from 'react'\nimport TopXBarGraph from '../Charts/TopXBarGraph'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport PanelConfirmedToday from '../Panels/PanelConfirmedToday'\nimport PanelDeathsToday from '../Panels/PanelDeathsToday'\nimport WorldHeatMap from '../WorldHeatMap/WorldHeatMap'\n\nconst getTopCases = () => gql`\n  query {\n    totalCases {\n      confirmedCasesToday\n      deathsToday\n    }\n    topXconfirmedTodayByCountry(limit: 10) {\n      country\n      confirmedCasesToday\n    }\n    topXdeathsTodayByCountry(limit: 10) {\n      country\n      deathsToday\n    }\n    casesByLocationWithNoProvince {\n      countryCode\n      confirmedCasesToday\n      deathsToday\n    }\n  }\n`\n\nconst isGreaterThanZero = (array, key) => {\n  return array.filter((element) => { return element[key] > 0 })\n}\n\nconst caseMaps = {\n  confirmedCasesToday: {\n    label: 'Confirmed cases today',\n    lightColour: \"#efedf5\",\n    darkColour:\"#756bb1\",\n    textClassName: 'confirmedTodayText'\n  },\n  deathsToday: {\n    label: 'Confirmed deaths today',\n    lightColour: \"#fff7bc\",\n    darkColour:\"#d95f0e\",\n    textClassName: 'deathsTodayText'\n  },\n}\n\nlet caseTypeState = 'confirmedCasesToday'\n\nconst TodayInnerPage = ({ title, lastUpdated }) => {\n  const [ caseType, setCaseType] = useState(caseTypeState)\n  caseTypeState = caseType\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const totalCases = data.totalCases\n  const casesByLocationWithNoProvince = data.casesByLocationWithNoProvince\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title} | {(new Date()).toLocaleDateString()}</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <PanelConfirmedToday caseCount={totalCases.confirmedCasesToday}/>\n        </div>\n        <div className=\"col-sm\">\n          <PanelDeathsToday caseCount={totalCases.deathsToday}/>\n        </div>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n              {Object.keys(caseMaps).map((caseKey) => {\n                const item = caseMaps[caseKey]\n                return  (\n                <label key={item.label} className={`btn btn-sm btn-light ${caseType === caseKey ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setCaseType(caseKey)}}/>{item.label}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <WorldHeatMap\n            mapDataLabel=\"Cases\"\n            caseType={caseType}\n            date={caseType}\n            data={casesByLocationWithNoProvince}\n            lightColour={caseMaps[caseType].lightColour}\n            darkColour={caseMaps[caseType].darkColour}\n          />\n        </div>\n      </div>\n\n      <div className=\"row multiTopBar\">\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXconfirmedTodayByCountry, 'confirmedCasesToday')}\n          id=\"top10confirmedToday\"\n          chartTitle=\"Top 10 confirmed cases today by country\"\n          chartLabel=\"Confirmed cases today\"\n          chartLabelKey=\"confirmedCasesToday\"\n          labelColor=\"purple\"\n        />\n\n        <TopXBarGraph\n          data={isGreaterThanZero(data.topXdeathsTodayByCountry, 'deathsToday')}\n          id=\"top10deathsToday\"\n          chartTitle=\"Top 10 deaths today by country\"\n          chartLabel=\"Deaths today\"\n          chartLabelKey=\"deathsToday\"\n          labelColor=\"yellow\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default TodayInnerPage\n","import React from 'react'\n\nconst Footer = () => {\n\n  return (\n    <>\n      <footer className=\"footer col-md-10 float-right mt-5 py-3\">\n        <div className=\"container pull-left\">\n          <span className=\"text-muted\">\n            Data sources: <a href=\"https://github.com/CSSEGISandData/COVID-19\">JHU CSSE</a>,&nbsp;\n            <a href=\"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">John Hopkins University</a>&nbsp;\n          </span>\n        </div>\n        <div className=\"container pull-right\">\n          <span className=\"text-muted\">Made by: <a href=\"https://github.com/mukundbhudia\">Mukund</a>,&nbsp;\n            <a href=\"https://github.com/salomao-rodrigues\">Sal</a>&nbsp;\n          </span>\n        </div>\n      </footer>\n    </>\n  )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport DataUpdatedTimeStamp from '../Nav/DataUpdatedTimeStamp'\nimport WorldHeatMap from '../WorldHeatMap/WorldHeatMap'\n\nconst getTopCases = () => gql`\n  query {\n    casesByLocationWithNoProvince {\n      countryCode\n      confirmed\n      active\n      recovered\n      deaths\n      confirmedCasesToday\n      deathsToday\n    }\n  }\n`\n\nconst caseMaps = {\n  confirmed: {\n    label: 'Confirmed',\n    lightColour: \"#fee0d2\",\n    darkColour:\"#de2d26\",\n    textClassName: 'confirmedText'\n  },\n  active: {\n    label: 'Active',\n    lightColour: \"#deebf7\",\n    darkColour:\"#3182bd\",\n    textClassName: 'activeText'\n  },\n  recovered: {\n    label: 'Recovered',\n    lightColour: \"#e5f5e0\",\n    darkColour:\"#31a354\",\n    textClassName: 'recoveredText'\n  },\n  deaths: {\n    label: 'Deaths',\n    lightColour: \"#f0f0f0\",\n    darkColour:\"#636363\",\n    textClassName: 'deathsText'\n  },\n  confirmedCasesToday: {\n    label: 'Confirmed today',\n    lightColour: \"#efedf5\",\n    darkColour:\"#756bb1\",\n    textClassName: 'confirmedTodayText'\n  },\n  deathsToday: {\n    label: 'Deaths today',\n    lightColour: \"#fff7bc\",\n    darkColour:\"#d95f0e\",\n    textClassName: 'deathsTodayText'\n  },\n}\n\nlet caseTypeState = 'confirmed'\n\nconst HeatMapsInnerPage = ({ title, lastUpdated }) => {\n  const [ caseType, setCaseType] = useState(caseTypeState)\n  caseTypeState = caseType\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const casesByLocationWithNoProvince = data.casesByLocationWithNoProvince\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-sm\">\n          <div className=\"btn-toolbar justify-content-center\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\">\n              {Object.keys(caseMaps).map((caseKey) => {\n                const item = caseMaps[caseKey]\n                return  (\n                <label key={item.label} className={`btn btn-sm btn-light ${caseType === caseKey ? 'active' : ''}`}>\n                  <input type=\"radio\" name=\"chart-type\" onClick={() => {setCaseType(caseKey)}}/>{item.label}\n                </label>\n                )\n              } )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <WorldHeatMap\n            mapDataLabel=\"Cases\"\n            caseType={caseType}\n            date={caseType}\n            data={casesByLocationWithNoProvince}\n            lightColour={caseMaps[caseType].lightColour}\n            darkColour={caseMaps[caseType].darkColour}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default HeatMapsInnerPage\n","import React from 'react'\nimport {\n  Link,\n  useRouteMatch,\n} from 'react-router-dom'\n\nconst iconMap = {\n  home: `<path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline>`,\n  chart: `<line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line><line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>`,\n  report: `<polygon points=\"12 2 2 7 12 12 22 7 12 2\"></polygon><polyline points=\"2 17 12 22 22 17\"></polyline><polyline points=\"2 12 12 17 22 12\"></polyline>`,\n}\n\nconst NavLink = ({ path, label, icon }) => {  \n  let match = useRouteMatch({\n    path: path,\n    exact: true,\n  })\n\n  return (\n    <>\n    <Link className={match && match.path === path ? \"nav-link active\" : \"nav-link\"} to={path}>\n      {icon && <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-home\" dangerouslySetInnerHTML={{__html: iconMap[icon]}}></svg>}\n      {label}\n    </Link>\n    </>\n  )\n}\n\nexport default NavLink\n","import React from 'react'\nimport {\n  useHistory,\n} from \"react-router-dom\"\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport './InputSearch.css'\n\nconst InputSearch = ({data}) => {\n  const ref = React.createRef();\n  const state = {\n    disabled: false,\n    dropup: false,\n    flip: false,\n    highlightOnlyResult: false,\n    minLength: 2,\n    open: undefined,\n    selectHintOnEnter: false,\n  }\n\n  const onBlur = (value) => {\n    console.log(value);\n    console.log(ref.current);\n    \n  }\n\n  let history = useHistory()\n    return (\n      <>\n        <Typeahead\n          {...state}\n          ref={ref}\n          labelKey={(option) => {\n            let label = option.country\n            if (option.province !== null) {\n              label = label + ` - ${option.province}`\n            }\n            return label\n          }}\n          onChange={(selected) => {\n            if (selected[0]) {\n              history.push(`/${selected[0].idKey}`)\n            }\n          }}\n          onBlur={ onBlur }\n          options={data}\n          className=\"w-100\" id=\"searchBox\" type=\"text\" placeholder=\"Search for a country, state, province...\" aria-label=\"Search\"\n        />\n      </>\n    )\n}\n\nexport default InputSearch\n","import React, { useState } from 'react'\nimport NavLink from './NavLink'\nimport InputSearch from './InputSearch/InputSearch'\n\nconst NavBar = ({ searchData }) => {\n  const [ collapsed, setCollapsed] = useState(true)\n\n  let classOne = collapsed ? 'collapse navbar-collapse' : 'collapse navbar-collapse show'\n  let classTwo = collapsed ? 'navbar-toggler collapsed' : 'navbar-toggler'\n\n  const toggleNavbar = () => {\n    if (collapsed === true) {\n      setCollapsed(false)\n    } else {\n      setCollapsed(true)\n    }\n  }\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-sm fixed-top navbar-dark bg-dark flex-md-nowrap p-0 shadow\">\n\n        <a className=\"navbar-brand\" href={`${process.env.PUBLIC_URL}/`}>COVID-19 Dashboard</a>\n\n        <button onClick={() => { toggleNavbar() }} className={`${classTwo}`} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample04\" aria-controls=\"navbarsExample04\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className={`${classOne}`} id=\"navbarsExample04\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <NavLink path=\"/\" label=\"Global\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/today\" label=\"Today\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/top-cases\" label=\"Top&nbsp;cases\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/heatmaps\" label=\"Heatmaps\"/>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink path=\"/table\" label=\"Data&nbsp;table\"/>\n            </li>\n          </ul>\n        </div>\n\n        <InputSearch data={searchData}/>\n\n      </nav>\n    </>\n  )\n}\n\nexport default NavBar\n","import {\n  Link,\n} from 'react-router-dom'\n\nimport React from 'react'\nimport NavLink from './NavLink'\n\nconst NavSideBar = ({ casesByLocation }) => {\n\n  return (\n    <>\n    <nav className=\"col-md-2 d-none d-md-block sidebar\">\n      <div className=\"sidebar-sticky\">\n        <ul className=\"nav flex-column\">\n          <li className=\"nav-item\">\n            <NavLink path=\"/\" label=\"Global\" icon=\"home\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/today\" label=\"Today\" icon=\"chart\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/top-cases\" label=\"Top&nbsp;cases\" icon=\"chart\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/heatmaps\" label=\"Heatmaps\" icon=\"report\"/>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink path=\"/table\" label=\"Data&nbsp;table\" icon=\"report\"/>\n          </li>\n        </ul>\n\n        <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n          <span>Reports by country</span>\n        </h6>\n        <ul className=\"nav flex-column mb-2\">\n          {casesByLocation.sort((a, b) => {\n            const countryA = a.country.toUpperCase();\n            const countryB = b.country.toUpperCase();\n\n            let comparison = 0;\n            if (countryA > countryB) {\n              comparison = 1;\n            } else if (countryA < countryB) {\n              comparison = -1;\n            }\n            return comparison;\n          }).map(allCases => {\n            let linkToRender = \"\"\n            if (allCases.province === null) {\n              linkToRender = (<li key={allCases.idKey} className=\"nav-item\">\n              <Link className=\"nav-link\" to={allCases.idKey}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-file-text\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10 9 9 9 8 9\"></polyline></svg>\n                {allCases.country}\n              </Link>\n            </li>)\n            }\n            return linkToRender\n          })}\n        </ul>\n      </div>\n    </nav>\n    </>\n  )\n}\n\nexport default NavSideBar\n","import React from 'react'\nimport {\n  Link,\n  useHistory,\n} from 'react-router-dom'\nimport * as timeago from 'timeago.js'\n\nconst setParams = (params) => {\n  const searchParams = new URLSearchParams()\n  searchParams.set(\"sort\", params.sortKey)\n  searchParams.set(\"order\", params.order)\n  return searchParams.toString()\n}\n\nconst DataTable = ({ sortConfig, tableData }) => {\n  let history = useHistory()\n\n  const sortedItems = () => {\n    let sortableItems = [...tableData]\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.sortKey] < b[sortConfig.sortKey]) {\n          return sortConfig.order === 'asc' ? -1 : 1\n        }\n        if (a[sortConfig.sortKey] > b[sortConfig.sortKey]) {\n          return sortConfig.order === 'asc' ? 1 : -1\n        }\n        return 0\n      })\n    }\n    return sortableItems\n  }\n\n  const requestSort = (sortKey) => {\n    let order = 'asc'\n    if (\n      sortConfig &&\n      sortConfig.sortKey === sortKey &&\n      sortConfig.order === 'asc'\n    ) {\n      order = 'desc'\n    }\n    history.push(`?${setParams({ sortKey, order })}`)\n  }\n\n  const showLabel = (headerSortKey) => {\n    let indicator = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      indicator = sortConfig.order === 'asc' ? '(↑)' : '(↓)'\n    }\n    return indicator\n  }\n\n  const applySelectedColumnStyle = (headerSortKey) => {\n    let style = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      style = 'selectedForSortColumn'\n    }\n    return style\n  }\n\n  const applySelectedColumnHeaderStyle = (headerSortKey) => {\n    let style = ''\n    if (sortConfig.sortKey === headerSortKey) {\n      style = 'sortableTableHeader sorted'\n    } else {\n      style = 'sortableTableHeader'\n    }\n    return style\n  }\n\n  let sortedTableData = sortedItems(tableData)\n\n  return (\n    <>\n      <div className=\"col-sm table-responsive\">\n        <table className=\"table table-sm table-hover sortable-data-table\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('country')} onClick={() => requestSort('country')}>Country {showLabel('country')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('confirmed')} onClick={() => requestSort('confirmed')}>Confirmed cases {showLabel('confirmed')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('confirmedCasesToday')} onClick={() => requestSort('confirmedCasesToday')}>Confrimed today {showLabel('confirmedCasesToday')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('active')} onClick={() => requestSort('active')}>Active {showLabel('active')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('recovered')} onClick={() => requestSort('recovered')}>Recovered {showLabel('recovered')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('deaths')} onClick={() => requestSort('deaths')}>Deaths {showLabel('deaths')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('deathsToday')} onClick={() => requestSort('deathsToday')}>Deaths today {showLabel('deathsToday')}</th>\n              <th scope=\"col\" className={applySelectedColumnHeaderStyle('lastUpdate')} onClick={() => requestSort('lastUpdate')}>Last updated {showLabel('lastUpdate')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedTableData.map((tableRow) => {\n              return (\n                <tr key={tableRow.idKey}>\n                  <td className={applySelectedColumnStyle('country')}><Link to={tableRow.idKey}>{tableRow.country}</Link></td>\n                  <td className={applySelectedColumnStyle('confirmed')}>{tableRow.confirmed.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('confirmedCasesToday')}>{tableRow.confirmedCasesToday.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('active')}>{tableRow.active.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('recovered')}>{tableRow.recovered.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('deaths')}>{tableRow.deaths.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('deathsToday')}>{tableRow.deathsToday.toLocaleString()}</td>\n                  <td className={applySelectedColumnStyle('lastUpdate')}>{timeago.format(new Date(parseInt(tableRow.lastUpdate)))}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  )\n}\n\nexport default DataTable\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport {\n  useLocation,\n} from 'react-router-dom'\nimport DataUpdatedTimeStamp from '../../Nav/DataUpdatedTimeStamp'\nimport DataTable from './DataTable'\n\nconst getTopCases = () => gql`\n  query {\n    casesByLocationWithNoProvince {\n      idKey\n      country\n      confirmed\n      confirmedCasesToday\n      active\n      recovered\n      deaths\n      deathsToday\n      lastUpdate\n    }\n  }\n`\n\nlet sortParams = { sortKey: 'country', order: 'asc' }\n\nconst useUrlQuery = (loc) => {\n  let urlParams = new URLSearchParams(loc.search);\n  return urlParams\n}\n\nconst DataTableInnerPage = ({ title, lastUpdated }) => {\n  let location = useLocation()\n  let query = useUrlQuery(location)\n\n  const sortQueryParam = query.get('sort')\n  const orderQueryParam = query.get('order')\n\n  if (sortQueryParam && orderQueryParam) {\n    sortParams = { sortKey: sortQueryParam, order: orderQueryParam }\n  }\n\n  const { loading, error, data } = useQuery(getTopCases())\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  return (\n    <>\n      <div id=\"global-page\" className=\"\">\n        <h3>{title}</h3>\n      </div>\n\n      <div className=\"row\">\n        <DataUpdatedTimeStamp lastUpdated={lastUpdated}/>\n      </div>\n\n      <div className=\"row\">\n        <DataTable sortConfig={sortParams} tableData={data.casesByLocationWithNoProvince}/>\n      </div>\n    </>\n  )\n}\n\nexport default DataTableInnerPage\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\n\nimport './App.css'\nimport GlobalInnerPage from './components/InnerPages/GlobalInnerPage'\nimport CountryInnerPage from './components/InnerPages/CountryInnerPage'\nimport TopCasesInnerPage from './components/InnerPages/TopCasesInnerPage'\nimport TodayInnerPage from './components/InnerPages/TodayInnerPage'\nimport CountryNotFound from './components/InnerPages/CountryNotFound'\nimport Footer from './components/Nav/Footer';\nimport HeatMapsInnerPage from './components/InnerPages/HeatMapsInnerPage';\nimport NavBar from './components/Nav/NavBar';\nimport NavSideBar from './components/Nav/NavSideBar';\nimport DataTableInnerPage from './components/InnerPages/DataTableInnerPage/DataTableInnerPage'\n\nconst COVID_TOTALS = gql`\n  query {\n    lastUpdated\n    casesByLocation {\n      idKey\n      country\n      province\n    }\n  }\n`\n\nconst App = () => {\n  const { loading, error, data } = useQuery(COVID_TOTALS)\n  if (loading) return <p>Loading data for dashboard ...</p>\n  if (error) return <p>{JSON.stringify(error, null, 2)}</p>\n\n  const lastUpdated = data.lastUpdated\n  const casesByLocation = data.casesByLocation\n\n  return (\n    <>\n    <Router basename={process.env.PUBLIC_URL}>\n\n      <NavBar searchData={casesByLocation}/>\n\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n\n        <NavSideBar casesByLocation={casesByLocation}/>\n\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n            <div className=\"container-xl\">\n              <Switch>\n                <Route exact path=\"/\">\n                <GlobalInnerPage\n                    title=\"Global\"\n                    lastUpdated={lastUpdated}\n                  />\n                </Route>\n                <Route path=\"/top-cases\" children={\n                  <TopCasesInnerPage\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/today\" children={\n                  <TodayInnerPage\n                    title=\"Today's cases\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/heatmaps\" children={\n                  <HeatMapsInnerPage\n                    title=\"Heatmaps\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/table\" children={\n                  <DataTableInnerPage\n                    title=\"Data Table\"\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"/:id\" children={\n                  <CountryInnerPage\n                    lastUpdated={lastUpdated}\n                  />\n                } />\n                <Route path=\"*\">\n                  <CountryNotFound />\n                </Route>\n              </Switch>\n            </div>\n          </main>\n        </div>\n      </div>\n      <Footer/>\n    </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst uriHost = process.env.REACT_APP_GQL_URI || 'http://localhost:4000'\n\nconst client = new ApolloClient({\n  uri: `${uriHost}/graphql`,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}